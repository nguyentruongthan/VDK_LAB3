
LAB3_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c6c  08002c6c  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c90  08002c90  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002c90  08002c90  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c90  08002c90  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c94  08002c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000020  08002cb8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002cb8  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097fd  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b52  00000000  00000000  00029846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002b398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002be90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e18  00000000  00000000  0002c890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be94  00000000  00000000  000436a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827f2  00000000  00000000  0004f53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1d2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b58  00000000  00000000  000d1d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c54 	.word	0x08002c54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08002c54 	.word	0x08002c54

0800014c <fsm_for_input_1_processing>:
#define BUTTON_PRESSED_MORE_THAN_1_SECOND 2

uint8_t buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};


void fsm_for_input_1_processing(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(buttonState[0]){
 8000150:	4b2b      	ldr	r3, [pc, #172]	; (8000200 <fsm_for_input_1_processing+0xb4>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b02      	cmp	r3, #2
 8000156:	d031      	beq.n	80001bc <fsm_for_input_1_processing+0x70>
 8000158:	2b02      	cmp	r3, #2
 800015a:	dc4e      	bgt.n	80001fa <fsm_for_input_1_processing+0xae>
 800015c:	2b00      	cmp	r3, #0
 800015e:	d002      	beq.n	8000166 <fsm_for_input_1_processing+0x1a>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d00c      	beq.n	800017e <fsm_for_input_1_processing+0x32>
			//TODO
			update_traffic_state_using_button_1();
		}
		break ;
	}
}
 8000164:	e049      	b.n	80001fa <fsm_for_input_1_processing+0xae>
		if(is_button_pressed(0)){
 8000166:	2000      	movs	r0, #0
 8000168:	f000 fb7e 	bl	8000868 <is_button_pressed>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d03e      	beq.n	80001f0 <fsm_for_input_1_processing+0xa4>
			buttonState[0] = BUTTON_PRESSED ;
 8000172:	4b23      	ldr	r3, [pc, #140]	; (8000200 <fsm_for_input_1_processing+0xb4>)
 8000174:	2201      	movs	r2, #1
 8000176:	701a      	strb	r2, [r3, #0]
			update_traffic_state_using_button_1();
 8000178:	f000 f940 	bl	80003fc <update_traffic_state_using_button_1>
		break ;
 800017c:	e038      	b.n	80001f0 <fsm_for_input_1_processing+0xa4>
		if(!is_button_pressed(0)) {
 800017e:	2000      	movs	r0, #0
 8000180:	f000 fb72 	bl	8000868 <is_button_pressed>
 8000184:	4603      	mov	r3, r0
 8000186:	2b00      	cmp	r3, #0
 8000188:	d103      	bne.n	8000192 <fsm_for_input_1_processing+0x46>
			buttonState[0] = BUTTON_RELEASED ;
 800018a:	4b1d      	ldr	r3, [pc, #116]	; (8000200 <fsm_for_input_1_processing+0xb4>)
 800018c:	2200      	movs	r2, #0
 800018e:	701a      	strb	r2, [r3, #0]
		break ;
 8000190:	e030      	b.n	80001f4 <fsm_for_input_1_processing+0xa8>
			if(is_button_pressed_1s(0)){
 8000192:	2000      	movs	r0, #0
 8000194:	f000 fb82 	bl	800089c <is_button_pressed_1s>
 8000198:	4603      	mov	r3, r0
 800019a:	2b00      	cmp	r3, #0
 800019c:	d02a      	beq.n	80001f4 <fsm_for_input_1_processing+0xa8>
				buttonState[0] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800019e:	4b18      	ldr	r3, [pc, #96]	; (8000200 <fsm_for_input_1_processing+0xb4>)
 80001a0:	2202      	movs	r2, #2
 80001a2:	701a      	strb	r2, [r3, #0]
				set_timer_button_1_500ms(500/TIMER_DURATION);
 80001a4:	4b17      	ldr	r3, [pc, #92]	; (8000204 <fsm_for_input_1_processing+0xb8>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80001b0:	4618      	mov	r0, r3
 80001b2:	f001 f86d 	bl	8001290 <set_timer_button_1_500ms>
				update_traffic_state_using_button_1();
 80001b6:	f000 f921 	bl	80003fc <update_traffic_state_using_button_1>
		break ;
 80001ba:	e01b      	b.n	80001f4 <fsm_for_input_1_processing+0xa8>
		if(!is_button_pressed(0)){
 80001bc:	2000      	movs	r0, #0
 80001be:	f000 fb53 	bl	8000868 <is_button_pressed>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d102      	bne.n	80001ce <fsm_for_input_1_processing+0x82>
			buttonState[0] = BUTTON_RELEASED;
 80001c8:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <fsm_for_input_1_processing+0xb4>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	701a      	strb	r2, [r3, #0]
		if(get_timer_button_1_500ms_flag()){
 80001ce:	f001 f873 	bl	80012b8 <get_timer_button_1_500ms_flag>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d00f      	beq.n	80001f8 <fsm_for_input_1_processing+0xac>
			set_timer_button_1_500ms(500/TIMER_DURATION);
 80001d8:	4b0a      	ldr	r3, [pc, #40]	; (8000204 <fsm_for_input_1_processing+0xb8>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001e4:	4618      	mov	r0, r3
 80001e6:	f001 f853 	bl	8001290 <set_timer_button_1_500ms>
			update_traffic_state_using_button_1();
 80001ea:	f000 f907 	bl	80003fc <update_traffic_state_using_button_1>
		break ;
 80001ee:	e003      	b.n	80001f8 <fsm_for_input_1_processing+0xac>
		break ;
 80001f0:	bf00      	nop
 80001f2:	e002      	b.n	80001fa <fsm_for_input_1_processing+0xae>
		break ;
 80001f4:	bf00      	nop
 80001f6:	e000      	b.n	80001fa <fsm_for_input_1_processing+0xae>
		break ;
 80001f8:	bf00      	nop
}
 80001fa:	bf00      	nop
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	2000003c 	.word	0x2000003c
 8000204:	20000060 	.word	0x20000060

08000208 <fsm_for_input_2_processing>:


void fsm_for_input_2_processing(void){
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	switch(buttonState[1]){
 800020c:	4b2b      	ldr	r3, [pc, #172]	; (80002bc <fsm_for_input_2_processing+0xb4>)
 800020e:	785b      	ldrb	r3, [r3, #1]
 8000210:	2b02      	cmp	r3, #2
 8000212:	d031      	beq.n	8000278 <fsm_for_input_2_processing+0x70>
 8000214:	2b02      	cmp	r3, #2
 8000216:	dc4e      	bgt.n	80002b6 <fsm_for_input_2_processing+0xae>
 8000218:	2b00      	cmp	r3, #0
 800021a:	d002      	beq.n	8000222 <fsm_for_input_2_processing+0x1a>
 800021c:	2b01      	cmp	r3, #1
 800021e:	d00c      	beq.n	800023a <fsm_for_input_2_processing+0x32>
			//TODO
			increase_traffic_led_7SEG_using_button_2();
		}
		break ;
	}
}
 8000220:	e049      	b.n	80002b6 <fsm_for_input_2_processing+0xae>
		if(is_button_pressed(1)){
 8000222:	2001      	movs	r0, #1
 8000224:	f000 fb20 	bl	8000868 <is_button_pressed>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d03e      	beq.n	80002ac <fsm_for_input_2_processing+0xa4>
			buttonState[1] = BUTTON_PRESSED ;
 800022e:	4b23      	ldr	r3, [pc, #140]	; (80002bc <fsm_for_input_2_processing+0xb4>)
 8000230:	2201      	movs	r2, #1
 8000232:	705a      	strb	r2, [r3, #1]
			increase_traffic_led_7SEG_using_button_2();
 8000234:	f000 f898 	bl	8000368 <increase_traffic_led_7SEG_using_button_2>
		break;
 8000238:	e038      	b.n	80002ac <fsm_for_input_2_processing+0xa4>
		if(!is_button_pressed(1)) {
 800023a:	2001      	movs	r0, #1
 800023c:	f000 fb14 	bl	8000868 <is_button_pressed>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d103      	bne.n	800024e <fsm_for_input_2_processing+0x46>
			buttonState[1] = BUTTON_RELEASED ;
 8000246:	4b1d      	ldr	r3, [pc, #116]	; (80002bc <fsm_for_input_2_processing+0xb4>)
 8000248:	2200      	movs	r2, #0
 800024a:	705a      	strb	r2, [r3, #1]
		break ;
 800024c:	e030      	b.n	80002b0 <fsm_for_input_2_processing+0xa8>
			if(is_button_pressed_1s(1)){
 800024e:	2001      	movs	r0, #1
 8000250:	f000 fb24 	bl	800089c <is_button_pressed_1s>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d02a      	beq.n	80002b0 <fsm_for_input_2_processing+0xa8>
				buttonState[1] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800025a:	4b18      	ldr	r3, [pc, #96]	; (80002bc <fsm_for_input_2_processing+0xb4>)
 800025c:	2202      	movs	r2, #2
 800025e:	705a      	strb	r2, [r3, #1]
				set_timer_button_2_500ms(500/TIMER_DURATION);
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <fsm_for_input_2_processing+0xb8>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000268:	fbb2 f3f3 	udiv	r3, r2, r3
 800026c:	4618      	mov	r0, r3
 800026e:	f001 f82d 	bl	80012cc <set_timer_button_2_500ms>
				increase_traffic_led_7SEG_using_button_2();
 8000272:	f000 f879 	bl	8000368 <increase_traffic_led_7SEG_using_button_2>
		break ;
 8000276:	e01b      	b.n	80002b0 <fsm_for_input_2_processing+0xa8>
		if(!is_button_pressed(1)){
 8000278:	2001      	movs	r0, #1
 800027a:	f000 faf5 	bl	8000868 <is_button_pressed>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d102      	bne.n	800028a <fsm_for_input_2_processing+0x82>
			buttonState[1] = BUTTON_RELEASED;
 8000284:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <fsm_for_input_2_processing+0xb4>)
 8000286:	2200      	movs	r2, #0
 8000288:	705a      	strb	r2, [r3, #1]
		if(get_timer_button_2_500ms_flag()){
 800028a:	f001 f833 	bl	80012f4 <get_timer_button_2_500ms_flag>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00f      	beq.n	80002b4 <fsm_for_input_2_processing+0xac>
			set_timer_button_2_500ms(500/TIMER_DURATION);
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <fsm_for_input_2_processing+0xb8>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800029c:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 f813 	bl	80012cc <set_timer_button_2_500ms>
			increase_traffic_led_7SEG_using_button_2();
 80002a6:	f000 f85f 	bl	8000368 <increase_traffic_led_7SEG_using_button_2>
		break ;
 80002aa:	e003      	b.n	80002b4 <fsm_for_input_2_processing+0xac>
		break;
 80002ac:	bf00      	nop
 80002ae:	e002      	b.n	80002b6 <fsm_for_input_2_processing+0xae>
		break ;
 80002b0:	bf00      	nop
 80002b2:	e000      	b.n	80002b6 <fsm_for_input_2_processing+0xae>
		break ;
 80002b4:	bf00      	nop
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000003c 	.word	0x2000003c
 80002c0:	20000060 	.word	0x20000060

080002c4 <fsm_for_input_3_processing>:

void fsm_for_input_3_processing(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch(buttonState[2]){
 80002c8:	4b10      	ldr	r3, [pc, #64]	; (800030c <fsm_for_input_3_processing+0x48>)
 80002ca:	789b      	ldrb	r3, [r3, #2]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d002      	beq.n	80002d6 <fsm_for_input_3_processing+0x12>
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d00c      	beq.n	80002ee <fsm_for_input_3_processing+0x2a>
	case BUTTON_PRESSED :
		if(!is_button_pressed(2)) {
			buttonState[2] = BUTTON_RELEASED ;
		}
		break;
	default: break;
 80002d4:	e018      	b.n	8000308 <fsm_for_input_3_processing+0x44>
		if(is_button_pressed(2)){
 80002d6:	2002      	movs	r0, #2
 80002d8:	f000 fac6 	bl	8000868 <is_button_pressed>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d00f      	beq.n	8000302 <fsm_for_input_3_processing+0x3e>
			buttonState[2] = BUTTON_PRESSED ;
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <fsm_for_input_3_processing+0x48>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	709a      	strb	r2, [r3, #2]
			set_traffic_led_7SEG_duration_using_button_3();
 80002e8:	f000 f812 	bl	8000310 <set_traffic_led_7SEG_duration_using_button_3>
		break ;
 80002ec:	e009      	b.n	8000302 <fsm_for_input_3_processing+0x3e>
		if(!is_button_pressed(2)) {
 80002ee:	2002      	movs	r0, #2
 80002f0:	f000 faba 	bl	8000868 <is_button_pressed>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d105      	bne.n	8000306 <fsm_for_input_3_processing+0x42>
			buttonState[2] = BUTTON_RELEASED ;
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <fsm_for_input_3_processing+0x48>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	709a      	strb	r2, [r3, #2]
		break;
 8000300:	e001      	b.n	8000306 <fsm_for_input_3_processing+0x42>
		break ;
 8000302:	bf00      	nop
 8000304:	e000      	b.n	8000308 <fsm_for_input_3_processing+0x44>
		break;
 8000306:	bf00      	nop
	}
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	2000003c 	.word	0x2000003c

08000310 <set_traffic_led_7SEG_duration_using_button_3>:
#include "fsm_for_traffic_processing.h"




void set_traffic_led_7SEG_duration_using_button_3(){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	switch(traffic_state){
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <set_traffic_led_7SEG_duration_using_button_3+0x44>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b07      	cmp	r3, #7
 800031a:	d010      	beq.n	800033e <set_traffic_led_7SEG_duration_using_button_3+0x2e>
 800031c:	2b07      	cmp	r3, #7
 800031e:	dc13      	bgt.n	8000348 <set_traffic_led_7SEG_duration_using_button_3+0x38>
 8000320:	2b05      	cmp	r3, #5
 8000322:	d002      	beq.n	800032a <set_traffic_led_7SEG_duration_using_button_3+0x1a>
 8000324:	2b06      	cmp	r3, #6
 8000326:	d005      	beq.n	8000334 <set_traffic_led_7SEG_duration_using_button_3+0x24>
		amber_duration = traffic_led_7SEG_1;
		break;
	case MODE4:
		green_duration = traffic_led_7SEG_1;
		break;
	default:break;
 8000328:	e00e      	b.n	8000348 <set_traffic_led_7SEG_duration_using_button_3+0x38>
		red_duration = traffic_led_7SEG_1;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <set_traffic_led_7SEG_duration_using_button_3+0x48>)
 800032c:	781a      	ldrb	r2, [r3, #0]
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <set_traffic_led_7SEG_duration_using_button_3+0x4c>)
 8000330:	701a      	strb	r2, [r3, #0]
		break;
 8000332:	e00a      	b.n	800034a <set_traffic_led_7SEG_duration_using_button_3+0x3a>
		amber_duration = traffic_led_7SEG_1;
 8000334:	4b08      	ldr	r3, [pc, #32]	; (8000358 <set_traffic_led_7SEG_duration_using_button_3+0x48>)
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <set_traffic_led_7SEG_duration_using_button_3+0x50>)
 800033a:	701a      	strb	r2, [r3, #0]
		break;
 800033c:	e005      	b.n	800034a <set_traffic_led_7SEG_duration_using_button_3+0x3a>
		green_duration = traffic_led_7SEG_1;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <set_traffic_led_7SEG_duration_using_button_3+0x48>)
 8000340:	781a      	ldrb	r2, [r3, #0]
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <set_traffic_led_7SEG_duration_using_button_3+0x54>)
 8000344:	701a      	strb	r2, [r3, #0]
		break;
 8000346:	e000      	b.n	800034a <set_traffic_led_7SEG_duration_using_button_3+0x3a>
	default:break;
 8000348:	bf00      	nop
	}
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	20000065 	.word	0x20000065
 8000358:	20000068 	.word	0x20000068
 800035c:	20000067 	.word	0x20000067
 8000360:	20000066 	.word	0x20000066
 8000364:	2000005c 	.word	0x2000005c

08000368 <increase_traffic_led_7SEG_using_button_2>:


void increase_traffic_led_7SEG_using_button_2(){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	if(	traffic_state == MODE2 || traffic_state == MODE3 ||
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <increase_traffic_led_7SEG_using_button_2+0x48>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b05      	cmp	r3, #5
 8000372:	d007      	beq.n	8000384 <increase_traffic_led_7SEG_using_button_2+0x1c>
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <increase_traffic_led_7SEG_using_button_2+0x48>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b06      	cmp	r3, #6
 800037a:	d003      	beq.n	8000384 <increase_traffic_led_7SEG_using_button_2+0x1c>
		traffic_state == MODE4){
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <increase_traffic_led_7SEG_using_button_2+0x48>)
 800037e:	781b      	ldrb	r3, [r3, #0]
	if(	traffic_state == MODE2 || traffic_state == MODE3 ||
 8000380:	2b07      	cmp	r3, #7
 8000382:	d110      	bne.n	80003a6 <increase_traffic_led_7SEG_using_button_2+0x3e>
		traffic_led_7SEG_1 = (traffic_led_7SEG_1 % 99) + 1;
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <increase_traffic_led_7SEG_using_button_2+0x4c>)
 8000386:	781a      	ldrb	r2, [r3, #0]
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <increase_traffic_led_7SEG_using_button_2+0x50>)
 800038a:	fba3 1302 	umull	r1, r3, r3, r2
 800038e:	0999      	lsrs	r1, r3, #6
 8000390:	460b      	mov	r3, r1
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	440b      	add	r3, r1
 8000396:	0159      	lsls	r1, r3, #5
 8000398:	440b      	add	r3, r1
 800039a:	1ad3      	subs	r3, r2, r3
 800039c:	b2db      	uxtb	r3, r3
 800039e:	3301      	adds	r3, #1
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <increase_traffic_led_7SEG_using_button_2+0x4c>)
 80003a4:	701a      	strb	r2, [r3, #0]
	}

}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000065 	.word	0x20000065
 80003b4:	20000068 	.word	0x20000068
 80003b8:	a57eb503 	.word	0xa57eb503

080003bc <check_duration_led_7SEG>:

// check if duration of red equal to sum of duration of green and amber
// if not equal, reset duration of this duration to INIT
void check_duration_led_7SEG(){
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	if(red_duration != green_duration + amber_duration){
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <check_duration_led_7SEG+0x34>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <check_duration_led_7SEG+0x38>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4619      	mov	r1, r3
 80003cc:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <check_duration_led_7SEG+0x3c>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	440b      	add	r3, r1
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d008      	beq.n	80003e8 <check_duration_led_7SEG+0x2c>
		red_duration = RED_DURATION_INIT;
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <check_duration_led_7SEG+0x34>)
 80003d8:	2208      	movs	r2, #8
 80003da:	701a      	strb	r2, [r3, #0]
		green_duration = GREEN_DURATION_INIT;
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <check_duration_led_7SEG+0x38>)
 80003de:	2205      	movs	r2, #5
 80003e0:	701a      	strb	r2, [r3, #0]
		amber_duration = AMBER_DURATION_INIT;
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <check_duration_led_7SEG+0x3c>)
 80003e4:	2203      	movs	r2, #3
 80003e6:	701a      	strb	r2, [r3, #0]
	}
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	20000067 	.word	0x20000067
 80003f4:	2000005c 	.word	0x2000005c
 80003f8:	20000066 	.word	0x20000066

080003fc <update_traffic_state_using_button_1>:

void update_traffic_state_using_button_1(){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	switch(traffic_state){
 8000400:	4b1d      	ldr	r3, [pc, #116]	; (8000478 <update_traffic_state_using_button_1+0x7c>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b07      	cmp	r3, #7
 8000406:	d016      	beq.n	8000436 <update_traffic_state_using_button_1+0x3a>
 8000408:	2b07      	cmp	r3, #7
 800040a:	dc2b      	bgt.n	8000464 <update_traffic_state_using_button_1+0x68>
 800040c:	2b05      	cmp	r3, #5
 800040e:	d002      	beq.n	8000416 <update_traffic_state_using_button_1+0x1a>
 8000410:	2b06      	cmp	r3, #6
 8000412:	d008      	beq.n	8000426 <update_traffic_state_using_button_1+0x2a>
 8000414:	e026      	b.n	8000464 <update_traffic_state_using_button_1+0x68>
		case MODE2:
			traffic_state = MODE3;
 8000416:	4b18      	ldr	r3, [pc, #96]	; (8000478 <update_traffic_state_using_button_1+0x7c>)
 8000418:	2206      	movs	r2, #6
 800041a:	701a      	strb	r2, [r3, #0]
			// set value of traffic_led_7SEG_1 which is showed in LED7SEG first and second
			// to value of amber duration when we change state from MODE2 to MODE3
			traffic_led_7SEG_1 = amber_duration;
 800041c:	4b17      	ldr	r3, [pc, #92]	; (800047c <update_traffic_state_using_button_1+0x80>)
 800041e:	781a      	ldrb	r2, [r3, #0]
 8000420:	4b17      	ldr	r3, [pc, #92]	; (8000480 <update_traffic_state_using_button_1+0x84>)
 8000422:	701a      	strb	r2, [r3, #0]
			break;
 8000424:	e026      	b.n	8000474 <update_traffic_state_using_button_1+0x78>
		case MODE3:
			traffic_state = MODE4;
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <update_traffic_state_using_button_1+0x7c>)
 8000428:	2207      	movs	r2, #7
 800042a:	701a      	strb	r2, [r3, #0]
			// set value of traffic_led_7SEG_1 which is showed in LED7SEG first and second
			// to value of green duration when we change state from MODE3 to MODE4
			traffic_led_7SEG_1 = green_duration;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <update_traffic_state_using_button_1+0x88>)
 800042e:	781a      	ldrb	r2, [r3, #0]
 8000430:	4b13      	ldr	r3, [pc, #76]	; (8000480 <update_traffic_state_using_button_1+0x84>)
 8000432:	701a      	strb	r2, [r3, #0]
			break;
 8000434:	e01e      	b.n	8000474 <update_traffic_state_using_button_1+0x78>
		case MODE4:
			// setup to prepare change traffic_state to GR

			// check if duration of red equal to sum of duration of green and amber
			// if not equal, reset duration of this duration to INIT
			check_duration_led_7SEG();
 8000436:	f7ff ffc1 	bl	80003bc <check_duration_led_7SEG>
			// reset value of 4 traffic to duration of state green - red
			// for we change to state GR
			traffic_led_7SEG_1 = green_duration;
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <update_traffic_state_using_button_1+0x88>)
 800043c:	781a      	ldrb	r2, [r3, #0]
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <update_traffic_state_using_button_1+0x84>)
 8000440:	701a      	strb	r2, [r3, #0]
			traffic_led_7SEG_2 = red_duration;
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <update_traffic_state_using_button_1+0x8c>)
 8000444:	781a      	ldrb	r2, [r3, #0]
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <update_traffic_state_using_button_1+0x90>)
 8000448:	701a      	strb	r2, [r3, #0]
			// set timer 1000ms for use for update update value of traffic_led_7SEG_1
			// and traffic_led_7SEG_1 every one second
			set_timer_1000ms(1000/TIMER_DURATION);
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <update_traffic_state_using_button_1+0x94>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000452:	fbb2 f3f3 	udiv	r3, r2, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fefc 	bl	8001254 <set_timer_1000ms>

			traffic_state = GR;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <update_traffic_state_using_button_1+0x7c>)
 800045e:	2203      	movs	r2, #3
 8000460:	701a      	strb	r2, [r3, #0]
			break;
 8000462:	e007      	b.n	8000474 <update_traffic_state_using_button_1+0x78>
		default:
			traffic_state = MODE2;
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <update_traffic_state_using_button_1+0x7c>)
 8000466:	2205      	movs	r2, #5
 8000468:	701a      	strb	r2, [r3, #0]
			traffic_led_7SEG_1 = red_duration;
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <update_traffic_state_using_button_1+0x8c>)
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b04      	ldr	r3, [pc, #16]	; (8000480 <update_traffic_state_using_button_1+0x84>)
 8000470:	701a      	strb	r2, [r3, #0]
			break;
 8000472:	bf00      	nop
	}
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000065 	.word	0x20000065
 800047c:	20000066 	.word	0x20000066
 8000480:	20000068 	.word	0x20000068
 8000484:	2000005c 	.word	0x2000005c
 8000488:	20000067 	.word	0x20000067
 800048c:	20000064 	.word	0x20000064
 8000490:	20000060 	.word	0x20000060

08000494 <execute_GR>:


void execute_GR(){
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	//display single LED for state GREEN - LED
	single_led_for_GR();
 8000498:	f000 fe08 	bl	80010ac <single_led_for_GR>
	//update value of led 7 SEG once software timer 1000ms
	if(get_timer_1000ms_flag()){
 800049c:	f000 feee 	bl	800127c <get_timer_1000ms_flag>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d01f      	beq.n	80004e6 <execute_GR+0x52>
		set_timer_1000ms(1000 / TIMER_DURATION);
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <execute_GR+0x58>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fece 	bl	8001254 <set_timer_1000ms>
		//TODO
		traffic_led_7SEG_1 --;
 80004b8:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <execute_GR+0x5c>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	3b01      	subs	r3, #1
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <execute_GR+0x5c>)
 80004c2:	701a      	strb	r2, [r3, #0]
		traffic_led_7SEG_2 --;
 80004c4:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <execute_GR+0x60>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	3b01      	subs	r3, #1
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <execute_GR+0x60>)
 80004ce:	701a      	strb	r2, [r3, #0]
		// if counter for green 1 led expert, we change state to AMBER - RED
		if(traffic_led_7SEG_1 <= 0){
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <execute_GR+0x5c>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d106      	bne.n	80004e6 <execute_GR+0x52>
			traffic_state = AR;
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <execute_GR+0x64>)
 80004da:	2204      	movs	r2, #4
 80004dc:	701a      	strb	r2, [r3, #0]

			//update value of two led 7 SEG first to amber_duration
			//for prepare for state AMBER - RED
			traffic_led_7SEG_1 = amber_duration;
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <execute_GR+0x68>)
 80004e0:	781a      	ldrb	r2, [r3, #0]
 80004e2:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <execute_GR+0x5c>)
 80004e4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000060 	.word	0x20000060
 80004f0:	20000068 	.word	0x20000068
 80004f4:	20000064 	.word	0x20000064
 80004f8:	20000065 	.word	0x20000065
 80004fc:	20000066 	.word	0x20000066

08000500 <execute_AR>:

void execute_AR(){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	//display single LED for state AMBER - RED
	single_led_for_AR();
 8000504:	f000 fdf6 	bl	80010f4 <single_led_for_AR>
	//update value of led 7 SEG once software timer 1000ms
	if(get_timer_1000ms_flag()){
 8000508:	f000 feb8 	bl	800127c <get_timer_1000ms_flag>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d023      	beq.n	800055a <execute_AR+0x5a>
		set_timer_1000ms(1000 / TIMER_DURATION);
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <execute_AR+0x60>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800051a:	fbb2 f3f3 	udiv	r3, r2, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fe98 	bl	8001254 <set_timer_1000ms>
		//TODO
		traffic_led_7SEG_1 --;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <execute_AR+0x64>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	3b01      	subs	r3, #1
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <execute_AR+0x64>)
 800052e:	701a      	strb	r2, [r3, #0]
		traffic_led_7SEG_2 --;
 8000530:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <execute_AR+0x68>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	3b01      	subs	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <execute_AR+0x68>)
 800053a:	701a      	strb	r2, [r3, #0]
		// if counter for amber 1 led expert, we change state to RED - GREEN
		if(traffic_led_7SEG_1 <= 0){
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <execute_AR+0x64>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d10a      	bne.n	800055a <execute_AR+0x5a>
			traffic_state = RG;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <execute_AR+0x6c>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]

			//update value of two led 7 SEG first to red_duration
			//and other two led 7 SEG to green_duration
			//for prepare for state RED - GREEN
			traffic_led_7SEG_1 = red_duration;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <execute_AR+0x70>)
 800054c:	781a      	ldrb	r2, [r3, #0]
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <execute_AR+0x64>)
 8000550:	701a      	strb	r2, [r3, #0]
			traffic_led_7SEG_2 = green_duration;
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <execute_AR+0x74>)
 8000554:	781a      	ldrb	r2, [r3, #0]
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <execute_AR+0x68>)
 8000558:	701a      	strb	r2, [r3, #0]

		}
	}
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000060 	.word	0x20000060
 8000564:	20000068 	.word	0x20000068
 8000568:	20000064 	.word	0x20000064
 800056c:	20000065 	.word	0x20000065
 8000570:	20000067 	.word	0x20000067
 8000574:	2000005c 	.word	0x2000005c

08000578 <execute_RG>:

void execute_RG(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	single_led_for_RG();
 800057c:	f000 fd4e 	bl	800101c <single_led_for_RG>
	if(get_timer_1000ms_flag()){
 8000580:	f000 fe7c 	bl	800127c <get_timer_1000ms_flag>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d01f      	beq.n	80005ca <execute_RG+0x52>
		set_timer_1000ms(1000 / TIMER_DURATION);
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <execute_RG+0x58>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000592:	fbb2 f3f3 	udiv	r3, r2, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fe5c 	bl	8001254 <set_timer_1000ms>
		//TODO
		traffic_led_7SEG_1 --;
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <execute_RG+0x5c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <execute_RG+0x5c>)
 80005a6:	701a      	strb	r2, [r3, #0]
		traffic_led_7SEG_2 --;
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <execute_RG+0x60>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <execute_RG+0x60>)
 80005b2:	701a      	strb	r2, [r3, #0]
		// if counter for green 2 led expert, we change state to RED - AMBER
		if(traffic_led_7SEG_2 <= 0){
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <execute_RG+0x60>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d106      	bne.n	80005ca <execute_RG+0x52>
			traffic_state = RA;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <execute_RG+0x64>)
 80005be:	2202      	movs	r2, #2
 80005c0:	701a      	strb	r2, [r3, #0]

			traffic_led_7SEG_2 = amber_duration;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <execute_RG+0x68>)
 80005c4:	781a      	ldrb	r2, [r3, #0]
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <execute_RG+0x60>)
 80005c8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000060 	.word	0x20000060
 80005d4:	20000068 	.word	0x20000068
 80005d8:	20000064 	.word	0x20000064
 80005dc:	20000065 	.word	0x20000065
 80005e0:	20000066 	.word	0x20000066

080005e4 <execute_RA>:

void execute_RA(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	single_led_for_RA();
 80005e8:	f000 fd3c 	bl	8001064 <single_led_for_RA>
	if(get_timer_1000ms_flag()){
 80005ec:	f000 fe46 	bl	800127c <get_timer_1000ms_flag>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d023      	beq.n	800063e <execute_RA+0x5a>
		set_timer_1000ms(1000 / TIMER_DURATION);
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <execute_RA+0x60>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fe26 	bl	8001254 <set_timer_1000ms>
		//TODO
		traffic_led_7SEG_1 --;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <execute_RA+0x64>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	3b01      	subs	r3, #1
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <execute_RA+0x64>)
 8000612:	701a      	strb	r2, [r3, #0]
		traffic_led_7SEG_2 --;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <execute_RA+0x68>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	3b01      	subs	r3, #1
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <execute_RA+0x68>)
 800061e:	701a      	strb	r2, [r3, #0]
		// if counter for amber 2 led expert, we change state to RED - AMBER
		if(traffic_led_7SEG_2 <= 0){
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <execute_RA+0x68>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10a      	bne.n	800063e <execute_RA+0x5a>
			traffic_state = GR;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <execute_RA+0x6c>)
 800062a:	2203      	movs	r2, #3
 800062c:	701a      	strb	r2, [r3, #0]

			traffic_led_7SEG_1 = green_duration;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <execute_RA+0x70>)
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <execute_RA+0x64>)
 8000634:	701a      	strb	r2, [r3, #0]
			traffic_led_7SEG_2 = red_duration;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <execute_RA+0x74>)
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <execute_RA+0x68>)
 800063c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000060 	.word	0x20000060
 8000648:	20000068 	.word	0x20000068
 800064c:	20000064 	.word	0x20000064
 8000650:	20000065 	.word	0x20000065
 8000654:	2000005c 	.word	0x2000005c
 8000658:	20000067 	.word	0x20000067

0800065c <execute_MODE2>:

void execute_MODE2(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	//traffic led 7 SEG third and fourth displays number 2
	traffic_led_7SEG_2 = 2;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <execute_MODE2+0x14>)
 8000662:	2202      	movs	r2, #2
 8000664:	701a      	strb	r2, [r3, #0]
	//display for single led
	single_led_blink_2Hz();
 8000666:	f000 fdb1 	bl	80011cc <single_led_blink_2Hz>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000064 	.word	0x20000064

08000674 <execute_MODE3>:

void execute_MODE3(){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	//traffic led 7 SEG third and fourth displays number 2
	traffic_led_7SEG_2 = 3;
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <execute_MODE3+0x14>)
 800067a:	2203      	movs	r2, #3
 800067c:	701a      	strb	r2, [r3, #0]
	//display for single led
	single_led_blink_2Hz();
 800067e:	f000 fda5 	bl	80011cc <single_led_blink_2Hz>

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000064 	.word	0x20000064

0800068c <execute_MODE4>:

void execute_MODE4(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	//traffic led 7 SEG third and fourth displays number 2
	traffic_led_7SEG_2 = 4;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <execute_MODE4+0x14>)
 8000692:	2204      	movs	r2, #4
 8000694:	701a      	strb	r2, [r3, #0]
	//display for single led
	single_led_blink_2Hz();
 8000696:	f000 fd99 	bl	80011cc <single_led_blink_2Hz>
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000064 	.word	0x20000064

080006a4 <fsm_for_traffic_state>:
void fsm_for_traffic_state(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	switch(traffic_state){
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <fsm_for_traffic_state+0x98>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b07      	cmp	r3, #7
 80006ae:	d83d      	bhi.n	800072c <fsm_for_traffic_state+0x88>
 80006b0:	a201      	add	r2, pc, #4	; (adr r2, 80006b8 <fsm_for_traffic_state+0x14>)
 80006b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b6:	bf00      	nop
 80006b8:	080006d9 	.word	0x080006d9
 80006bc:	0800070f 	.word	0x0800070f
 80006c0:	08000715 	.word	0x08000715
 80006c4:	08000703 	.word	0x08000703
 80006c8:	08000709 	.word	0x08000709
 80006cc:	0800071b 	.word	0x0800071b
 80006d0:	08000721 	.word	0x08000721
 80006d4:	08000727 	.word	0x08000727
	case INIT:
		traffic_state = GR;
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <fsm_for_traffic_state+0x98>)
 80006da:	2203      	movs	r2, #3
 80006dc:	701a      	strb	r2, [r3, #0]

		red_duration = RED_DURATION_INIT;
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <fsm_for_traffic_state+0x9c>)
 80006e0:	2208      	movs	r2, #8
 80006e2:	701a      	strb	r2, [r3, #0]
		green_duration = GREEN_DURATION_INIT;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <fsm_for_traffic_state+0xa0>)
 80006e6:	2205      	movs	r2, #5
 80006e8:	701a      	strb	r2, [r3, #0]
		amber_duration = AMBER_DURATION_INIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <fsm_for_traffic_state+0xa4>)
 80006ec:	2203      	movs	r2, #3
 80006ee:	701a      	strb	r2, [r3, #0]

		// set value of traffic_led_7SEG_1 and traffic_led_7SEG_2
		// to prepare for display in state GR
		traffic_led_7SEG_1 = green_duration;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <fsm_for_traffic_state+0xa0>)
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <fsm_for_traffic_state+0xa8>)
 80006f6:	701a      	strb	r2, [r3, #0]
		traffic_led_7SEG_2 = red_duration;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <fsm_for_traffic_state+0x9c>)
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <fsm_for_traffic_state+0xac>)
 80006fe:	701a      	strb	r2, [r3, #0]

		break;
 8000700:	e015      	b.n	800072e <fsm_for_traffic_state+0x8a>
	case GR:
		execute_GR();
 8000702:	f7ff fec7 	bl	8000494 <execute_GR>
		break;
 8000706:	e012      	b.n	800072e <fsm_for_traffic_state+0x8a>
	case AR:
		execute_AR();
 8000708:	f7ff fefa 	bl	8000500 <execute_AR>
		break;
 800070c:	e00f      	b.n	800072e <fsm_for_traffic_state+0x8a>
	case RG:
		execute_RG();
 800070e:	f7ff ff33 	bl	8000578 <execute_RG>
		break;
 8000712:	e00c      	b.n	800072e <fsm_for_traffic_state+0x8a>
	case RA:
		execute_RA();
 8000714:	f7ff ff66 	bl	80005e4 <execute_RA>
		break;
 8000718:	e009      	b.n	800072e <fsm_for_traffic_state+0x8a>
	case MODE2:
		execute_MODE2();
 800071a:	f7ff ff9f 	bl	800065c <execute_MODE2>
		break;
 800071e:	e006      	b.n	800072e <fsm_for_traffic_state+0x8a>
	case MODE3:
		execute_MODE3();
 8000720:	f7ff ffa8 	bl	8000674 <execute_MODE3>
		break;
 8000724:	e003      	b.n	800072e <fsm_for_traffic_state+0x8a>
	case MODE4:
		execute_MODE4();
 8000726:	f7ff ffb1 	bl	800068c <execute_MODE4>
		break;
 800072a:	e000      	b.n	800072e <fsm_for_traffic_state+0x8a>
	default: break;
 800072c:	bf00      	nop
	}
	//display led 7 SEG
	// update buffer for LED 7 SEG
	updateTraffic7SEGBuffer();
 800072e:	f000 fc35 	bl	8000f9c <updateTraffic7SEGBuffer>
	// sweep LED 7 SEG
	update7SEG();
 8000732:	f000 fb91 	bl	8000e58 <update7SEG>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000065 	.word	0x20000065
 8000740:	20000067 	.word	0x20000067
 8000744:	2000005c 	.word	0x2000005c
 8000748:	20000066 	.word	0x20000066
 800074c:	20000068 	.word	0x20000068
 8000750:	20000064 	.word	0x20000064

08000754 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS] = {0, 0, 0};

// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS] = {0, 0, 0};
void button_reading(void){
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 800075a:	2300      	movs	r3, #0
 800075c:	71fb      	strb	r3, [r7, #7]
 800075e:	e06c      	b.n	800083a <button_reading+0xe6>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000760:	79fa      	ldrb	r2, [r7, #7]
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	4939      	ldr	r1, [pc, #228]	; (800084c <button_reading+0xf8>)
 8000766:	5c89      	ldrb	r1, [r1, r2]
 8000768:	4a39      	ldr	r2, [pc, #228]	; (8000850 <button_reading+0xfc>)
 800076a:	54d1      	strb	r1, [r2, r3]
		switch(i){
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b02      	cmp	r3, #2
 8000770:	d01c      	beq.n	80007ac <button_reading+0x58>
 8000772:	2b02      	cmp	r3, #2
 8000774:	dc25      	bgt.n	80007c2 <button_reading+0x6e>
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <button_reading+0x2c>
 800077a:	2b01      	cmp	r3, #1
 800077c:	d00b      	beq.n	8000796 <button_reading+0x42>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
			break;
		case 2:
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
			break;
		default:break;
 800077e:	e020      	b.n	80007c2 <button_reading+0x6e>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000780:	79fc      	ldrb	r4, [r7, #7]
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	4833      	ldr	r0, [pc, #204]	; (8000854 <button_reading+0x100>)
 8000788:	f001 fa2c 	bl	8001be4 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	4b2e      	ldr	r3, [pc, #184]	; (800084c <button_reading+0xf8>)
 8000792:	551a      	strb	r2, [r3, r4]
			break;
 8000794:	e016      	b.n	80007c4 <button_reading+0x70>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000796:	79fc      	ldrb	r4, [r7, #7]
 8000798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079c:	482d      	ldr	r0, [pc, #180]	; (8000854 <button_reading+0x100>)
 800079e:	f001 fa21 	bl	8001be4 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <button_reading+0xf8>)
 80007a8:	551a      	strb	r2, [r3, r4]
			break;
 80007aa:	e00b      	b.n	80007c4 <button_reading+0x70>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80007ac:	79fc      	ldrb	r4, [r7, #7]
 80007ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b2:	4828      	ldr	r0, [pc, #160]	; (8000854 <button_reading+0x100>)
 80007b4:	f001 fa16 	bl	8001be4 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b23      	ldr	r3, [pc, #140]	; (800084c <button_reading+0xf8>)
 80007be:	551a      	strb	r2, [r3, r4]
			break;
 80007c0:	e000      	b.n	80007c4 <button_reading+0x70>
		default:break;
 80007c2:	bf00      	nop
		}

		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	4a21      	ldr	r2, [pc, #132]	; (800084c <button_reading+0xf8>)
 80007c8:	5cd2      	ldrb	r2, [r2, r3]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4920      	ldr	r1, [pc, #128]	; (8000850 <button_reading+0xfc>)
 80007ce:	5ccb      	ldrb	r3, [r1, r3]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d105      	bne.n	80007e0 <button_reading+0x8c>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80007d4:	79fa      	ldrb	r2, [r7, #7]
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	491c      	ldr	r1, [pc, #112]	; (800084c <button_reading+0xf8>)
 80007da:	5c89      	ldrb	r1, [r1, r2]
 80007dc:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <button_reading+0x104>)
 80007de:	54d1      	strb	r1, [r2, r3]

		if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	4a1d      	ldr	r2, [pc, #116]	; (8000858 <button_reading+0x104>)
 80007e4:	5cd3      	ldrb	r3, [r2, r3]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d11b      	bne.n	8000822 <button_reading+0xce>
			// if a button is pressed , we start counting
			if(counterForButtonPress1s[i] <	DURATION_FOR_AUTO_INCREASING){
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	4a1b      	ldr	r2, [pc, #108]	; (800085c <button_reading+0x108>)
 80007ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f2:	4619      	mov	r1, r3
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <button_reading+0x10c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000800:	4299      	cmp	r1, r3
 8000802:	d209      	bcs.n	8000818 <button_reading+0xc4>
				counterForButtonPress1s[i]++;
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4a15      	ldr	r2, [pc, #84]	; (800085c <button_reading+0x108>)
 8000808:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800080c:	3201      	adds	r2, #1
 800080e:	b291      	uxth	r1, r2
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <button_reading+0x108>)
 8000812:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000816:	e00d      	b.n	8000834 <button_reading+0xe0>
			}else{
				// the flag is turned on when 1 second has passed
				// since the button is pressed .
				flagForButtonPress1s[i] = 1;
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <button_reading+0x110>)
 800081c:	2101      	movs	r1, #1
 800081e:	54d1      	strb	r1, [r2, r3]
 8000820:	e008      	b.n	8000834 <button_reading+0xe0>
				// TODO
			}
		}else{
			counterForButtonPress1s[i] = 0;
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <button_reading+0x108>)
 8000826:	2100      	movs	r1, #0
 8000828:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <button_reading+0x110>)
 8000830:	2100      	movs	r1, #0
 8000832:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	3301      	adds	r3, #1
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d98f      	bls.n	8000760 <button_reading+0xc>
		}
	}
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bd90      	pop	{r4, r7, pc}
 800084a:	bf00      	nop
 800084c:	20000040 	.word	0x20000040
 8000850:	20000044 	.word	0x20000044
 8000854:	40010800 	.word	0x40010800
 8000858:	20000000 	.word	0x20000000
 800085c:	2000004c 	.word	0x2000004c
 8000860:	20000060 	.word	0x20000060
 8000864:	20000048 	.word	0x20000048

08000868 <is_button_pressed>:


unsigned char is_button_pressed(uint8_t index){
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d901      	bls.n	800087c <is_button_pressed+0x14>
 8000878:	2300      	movs	r3, #0
 800087a:	e007      	b.n	800088c <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4a06      	ldr	r2, [pc, #24]	; (8000898 <is_button_pressed+0x30>)
 8000880:	5cd3      	ldrb	r3, [r2, r3]
 8000882:	2b00      	cmp	r3, #0
 8000884:	bf0c      	ite	eq
 8000886:	2301      	moveq	r3, #1
 8000888:	2300      	movne	r3, #0
 800088a:	b2db      	uxtb	r3, r3
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000000 	.word	0x20000000

0800089c <is_button_pressed_1s>:


unsigned char is_button_pressed_1s(unsigned char index){
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d901      	bls.n	80008b0 <is_button_pressed_1s+0x14>
 80008ac:	23ff      	movs	r3, #255	; 0xff
 80008ae:	e007      	b.n	80008c0 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4a06      	ldr	r2, [pc, #24]	; (80008cc <is_button_pressed_1s+0x30>)
 80008b4:	5cd3      	ldrb	r3, [r2, r3]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	bf0c      	ite	eq
 80008ba:	2301      	moveq	r3, #1
 80008bc:	2300      	movne	r3, #0
 80008be:	b2db      	uxtb	r3, r3
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20000048 	.word	0x20000048

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d4:	f000 fe9c 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d8:	f000 f81a 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 f8b8 	bl	8000a50 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008e0:	f000 f852 	bl	8000988 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80008e4:	4808      	ldr	r0, [pc, #32]	; (8000908 <main+0x38>)
 80008e6:	f001 fdf1 	bl	80024cc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  traffic_state = INIT;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <main+0x3c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
  init_timer();
 80008f0:	f000 fdca 	bl	8001488 <init_timer>
  {
    /* USER CODE END WHILE */
	  // fsm for update state of traffic_state
	  // as state GR, AR, RG and RA, we update through counter of led 7 SEG
	  // this function also display led7SEG and single led according traffic_state
	  fsm_for_traffic_state();
 80008f4:	f7ff fed6 	bl	80006a4 <fsm_for_traffic_state>

	  // fsm for reading button 1
	  // update traffic_state once button 1 is pressed or pressed in 1s
	  // and hold this button more than 500ms
	  fsm_for_input_1_processing();
 80008f8:	f7ff fc28 	bl	800014c <fsm_for_input_1_processing>

	  // fsm for reading button 3
	  // if traffic_state is MODE2, 3 or 4, it will increase value of traffic_led_7SEG
	  // once pressed or hold button 2 more than 1 second or every 0.5 second after
	  // hold button 2 more than 1 second
	  fsm_for_input_2_processing();
 80008fc:	f7ff fc84 	bl	8000208 <fsm_for_input_2_processing>

	  // fsm for reading button 3
	  // if traffic_state is MODE2, 3 or 4, it will set value of duration of red, amber or green
	  // according with MODE2, 3 or 4 when we pressed it.
	  fsm_for_input_3_processing();
 8000900:	f7ff fce0 	bl	80002c4 <fsm_for_input_3_processing>
	  fsm_for_traffic_state();
 8000904:	e7f6      	b.n	80008f4 <main+0x24>
 8000906:	bf00      	nop
 8000908:	2000006c 	.word	0x2000006c
 800090c:	20000065 	.word	0x20000065

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2228      	movs	r2, #40	; 0x28
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f002 f990 	bl	8002c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000936:	2301      	movs	r3, #1
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093a:	2310      	movs	r3, #16
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800093e:	2300      	movs	r3, #0
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0318 	add.w	r3, r7, #24
 8000946:	4618      	mov	r0, r3
 8000948:	f001 f994 	bl	8001c74 <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000952:	f000 f8eb 	bl	8000b2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f001 fc00 	bl	8002174 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800097a:	f000 f8d7 	bl	8000b2c <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3740      	adds	r7, #64	; 0x40
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <MX_TIM2_Init+0xbc>)
 80009a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80009ac:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <MX_TIM2_Init+0xbc>)
 80009ae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <MX_TIM2_Init+0xbc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <MX_TIM2_Init+0xbc>)
 80009bc:	2209      	movs	r2, #9
 80009be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <MX_TIM2_Init+0xbc>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_TIM2_Init+0xbc>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009cc:	481d      	ldr	r0, [pc, #116]	; (8000a44 <MX_TIM2_Init+0xbc>)
 80009ce:	f001 fd2d 	bl	800242c <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009d8:	f000 f8a8 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	4816      	ldr	r0, [pc, #88]	; (8000a44 <MX_TIM2_Init+0xbc>)
 80009ea:	f001 fec3 	bl	8002774 <HAL_TIM_ConfigClockSource>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009f4:	f000 f89a 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	480f      	ldr	r0, [pc, #60]	; (8000a44 <MX_TIM2_Init+0xbc>)
 8000a06:	f002 f88f 	bl	8002b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a10:	f000 f88c 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // frequency of timer interrupt
  uint32_t TIMER_F = 8000000/((htim2.Init.Prescaler + 1)*(htim2.Init.Period + 1));
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_TIM2_Init+0xbc>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <MX_TIM2_Init+0xbc>)
 8000a1c:	68d2      	ldr	r2, [r2, #12]
 8000a1e:	3201      	adds	r2, #1
 8000a20:	fb02 f303 	mul.w	r3, r2, r3
 8000a24:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <MX_TIM2_Init+0xc0>)
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	61fb      	str	r3, [r7, #28]
  // cycle of timer interrupt with unit is mili second
  TIMER_DURATION = 1000/TIMER_F;//ms
 8000a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <MX_TIM2_Init+0xc4>)
 8000a38:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000006c 	.word	0x2000006c
 8000a48:	007a1200 	.word	0x007a1200
 8000a4c:	20000060 	.word	0x20000060

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <MX_GPIO_Init+0xb8>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <MX_GPIO_Init+0xb8>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MX_GPIO_Init+0xb8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_GPIO_Init+0xb8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a21      	ldr	r2, [pc, #132]	; (8000b08 <MX_GPIO_Init+0xb8>)
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_GPIO_Init+0xb8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|GREEN_1_Pin|AMBER_1_Pin|RED_2_Pin
 8000a94:	2200      	movs	r2, #0
 8000a96:	21fe      	movs	r1, #254	; 0xfe
 8000a98:	481c      	ldr	r0, [pc, #112]	; (8000b0c <MX_GPIO_Init+0xbc>)
 8000a9a:	f001 f8ba 	bl	8001c12 <HAL_GPIO_WritePin>
                          |GREEN_2_Pin|AMBER_2_Pin|LED_BLINK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin|EN2_Pin
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f640 717f 	movw	r1, #3967	; 0xf7f
 8000aa4:	481a      	ldr	r0, [pc, #104]	; (8000b10 <MX_GPIO_Init+0xc0>)
 8000aa6:	f001 f8b4 	bl	8001c12 <HAL_GPIO_WritePin>
                          |EN3_Pin|LED_D_Pin|LED_E_Pin|LED_F_Pin
                          |LED_G_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_1_Pin GREEN_1_Pin AMBER_1_Pin RED_2_Pin
                           GREEN_2_Pin AMBER_2_Pin LED_BLINK_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|GREEN_1_Pin|AMBER_1_Pin|RED_2_Pin
 8000aaa:	23fe      	movs	r3, #254	; 0xfe
 8000aac:	60bb      	str	r3, [r7, #8]
                          |GREEN_2_Pin|AMBER_2_Pin|LED_BLINK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4812      	ldr	r0, [pc, #72]	; (8000b0c <MX_GPIO_Init+0xbc>)
 8000ac2:	f000 ff15 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin LED_C_Pin EN2_Pin
                           EN3_Pin LED_D_Pin LED_E_Pin LED_F_Pin
                           LED_G_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|EN2_Pin
 8000ac6:	f640 737f 	movw	r3, #3967	; 0xf7f
 8000aca:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|LED_D_Pin|LED_E_Pin|LED_F_Pin
                          |LED_G_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4619      	mov	r1, r3
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <MX_GPIO_Init+0xc0>)
 8000ae0:	f000 ff06 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000ae4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ae8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	4619      	mov	r1, r3
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_GPIO_Init+0xbc>)
 8000afa:	f000 fef9 	bl	80018f0 <HAL_GPIO_Init>

}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	40010c00 	.word	0x40010c00

08000b14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	timer_run();
 8000b1c:	f000 fc44 	bl	80013a8 <timer_run>
	button_reading();
 8000b20:	f7ff fe18 	bl	8000754 <button_reading>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <display7SEG>:


#include "output_display.h"


void display7SEG(int num){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b09      	cmp	r3, #9
 8000b44:	f200 8180 	bhi.w	8000e48 <display7SEG+0x310>
 8000b48:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <display7SEG+0x18>)
 8000b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4e:	bf00      	nop
 8000b50:	08000b79 	.word	0x08000b79
 8000b54:	08000bc1 	.word	0x08000bc1
 8000b58:	08000c09 	.word	0x08000c09
 8000b5c:	08000c51 	.word	0x08000c51
 8000b60:	08000c99 	.word	0x08000c99
 8000b64:	08000ce1 	.word	0x08000ce1
 8000b68:	08000d29 	.word	0x08000d29
 8000b6c:	08000d71 	.word	0x08000d71
 8000b70:	08000db9 	.word	0x08000db9
 8000b74:	08000e01 	.word	0x08000e01
	switch(num){
	case 0:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	48b5      	ldr	r0, [pc, #724]	; (8000e54 <display7SEG+0x31c>)
 8000b7e:	f001 f848 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2102      	movs	r1, #2
 8000b86:	48b3      	ldr	r0, [pc, #716]	; (8000e54 <display7SEG+0x31c>)
 8000b88:	f001 f843 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2104      	movs	r1, #4
 8000b90:	48b0      	ldr	r0, [pc, #704]	; (8000e54 <display7SEG+0x31c>)
 8000b92:	f001 f83e 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2108      	movs	r1, #8
 8000b9a:	48ae      	ldr	r0, [pc, #696]	; (8000e54 <display7SEG+0x31c>)
 8000b9c:	f001 f839 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	48ab      	ldr	r0, [pc, #684]	; (8000e54 <display7SEG+0x31c>)
 8000ba6:	f001 f834 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2120      	movs	r1, #32
 8000bae:	48a9      	ldr	r0, [pc, #676]	; (8000e54 <display7SEG+0x31c>)
 8000bb0:	f001 f82f 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2140      	movs	r1, #64	; 0x40
 8000bb8:	48a6      	ldr	r0, [pc, #664]	; (8000e54 <display7SEG+0x31c>)
 8000bba:	f001 f82a 	bl	8001c12 <HAL_GPIO_WritePin>
		break;
 8000bbe:	e144      	b.n	8000e4a <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	48a3      	ldr	r0, [pc, #652]	; (8000e54 <display7SEG+0x31c>)
 8000bc6:	f001 f824 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2102      	movs	r1, #2
 8000bce:	48a1      	ldr	r0, [pc, #644]	; (8000e54 <display7SEG+0x31c>)
 8000bd0:	f001 f81f 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	489e      	ldr	r0, [pc, #632]	; (8000e54 <display7SEG+0x31c>)
 8000bda:	f001 f81a 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2108      	movs	r1, #8
 8000be2:	489c      	ldr	r0, [pc, #624]	; (8000e54 <display7SEG+0x31c>)
 8000be4:	f001 f815 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2110      	movs	r1, #16
 8000bec:	4899      	ldr	r0, [pc, #612]	; (8000e54 <display7SEG+0x31c>)
 8000bee:	f001 f810 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	4897      	ldr	r0, [pc, #604]	; (8000e54 <display7SEG+0x31c>)
 8000bf8:	f001 f80b 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2140      	movs	r1, #64	; 0x40
 8000c00:	4894      	ldr	r0, [pc, #592]	; (8000e54 <display7SEG+0x31c>)
 8000c02:	f001 f806 	bl	8001c12 <HAL_GPIO_WritePin>
		break;
 8000c06:	e120      	b.n	8000e4a <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4891      	ldr	r0, [pc, #580]	; (8000e54 <display7SEG+0x31c>)
 8000c0e:	f001 f800 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2102      	movs	r1, #2
 8000c16:	488f      	ldr	r0, [pc, #572]	; (8000e54 <display7SEG+0x31c>)
 8000c18:	f000 fffb 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2104      	movs	r1, #4
 8000c20:	488c      	ldr	r0, [pc, #560]	; (8000e54 <display7SEG+0x31c>)
 8000c22:	f000 fff6 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2108      	movs	r1, #8
 8000c2a:	488a      	ldr	r0, [pc, #552]	; (8000e54 <display7SEG+0x31c>)
 8000c2c:	f000 fff1 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2110      	movs	r1, #16
 8000c34:	4887      	ldr	r0, [pc, #540]	; (8000e54 <display7SEG+0x31c>)
 8000c36:	f000 ffec 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	4885      	ldr	r0, [pc, #532]	; (8000e54 <display7SEG+0x31c>)
 8000c40:	f000 ffe7 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2140      	movs	r1, #64	; 0x40
 8000c48:	4882      	ldr	r0, [pc, #520]	; (8000e54 <display7SEG+0x31c>)
 8000c4a:	f000 ffe2 	bl	8001c12 <HAL_GPIO_WritePin>
		break;
 8000c4e:	e0fc      	b.n	8000e4a <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2101      	movs	r1, #1
 8000c54:	487f      	ldr	r0, [pc, #508]	; (8000e54 <display7SEG+0x31c>)
 8000c56:	f000 ffdc 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	487d      	ldr	r0, [pc, #500]	; (8000e54 <display7SEG+0x31c>)
 8000c60:	f000 ffd7 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2104      	movs	r1, #4
 8000c68:	487a      	ldr	r0, [pc, #488]	; (8000e54 <display7SEG+0x31c>)
 8000c6a:	f000 ffd2 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2108      	movs	r1, #8
 8000c72:	4878      	ldr	r0, [pc, #480]	; (8000e54 <display7SEG+0x31c>)
 8000c74:	f000 ffcd 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	4875      	ldr	r0, [pc, #468]	; (8000e54 <display7SEG+0x31c>)
 8000c7e:	f000 ffc8 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2120      	movs	r1, #32
 8000c86:	4873      	ldr	r0, [pc, #460]	; (8000e54 <display7SEG+0x31c>)
 8000c88:	f000 ffc3 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	4870      	ldr	r0, [pc, #448]	; (8000e54 <display7SEG+0x31c>)
 8000c92:	f000 ffbe 	bl	8001c12 <HAL_GPIO_WritePin>
		break;
 8000c96:	e0d8      	b.n	8000e4a <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	486d      	ldr	r0, [pc, #436]	; (8000e54 <display7SEG+0x31c>)
 8000c9e:	f000 ffb8 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	486b      	ldr	r0, [pc, #428]	; (8000e54 <display7SEG+0x31c>)
 8000ca8:	f000 ffb3 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2104      	movs	r1, #4
 8000cb0:	4868      	ldr	r0, [pc, #416]	; (8000e54 <display7SEG+0x31c>)
 8000cb2:	f000 ffae 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2108      	movs	r1, #8
 8000cba:	4866      	ldr	r0, [pc, #408]	; (8000e54 <display7SEG+0x31c>)
 8000cbc:	f000 ffa9 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4863      	ldr	r0, [pc, #396]	; (8000e54 <display7SEG+0x31c>)
 8000cc6:	f000 ffa4 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2120      	movs	r1, #32
 8000cce:	4861      	ldr	r0, [pc, #388]	; (8000e54 <display7SEG+0x31c>)
 8000cd0:	f000 ff9f 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	485e      	ldr	r0, [pc, #376]	; (8000e54 <display7SEG+0x31c>)
 8000cda:	f000 ff9a 	bl	8001c12 <HAL_GPIO_WritePin>
		break;
 8000cde:	e0b4      	b.n	8000e4a <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	485b      	ldr	r0, [pc, #364]	; (8000e54 <display7SEG+0x31c>)
 8000ce6:	f000 ff94 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2102      	movs	r1, #2
 8000cee:	4859      	ldr	r0, [pc, #356]	; (8000e54 <display7SEG+0x31c>)
 8000cf0:	f000 ff8f 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	4856      	ldr	r0, [pc, #344]	; (8000e54 <display7SEG+0x31c>)
 8000cfa:	f000 ff8a 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2108      	movs	r1, #8
 8000d02:	4854      	ldr	r0, [pc, #336]	; (8000e54 <display7SEG+0x31c>)
 8000d04:	f000 ff85 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	4851      	ldr	r0, [pc, #324]	; (8000e54 <display7SEG+0x31c>)
 8000d0e:	f000 ff80 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2120      	movs	r1, #32
 8000d16:	484f      	ldr	r0, [pc, #316]	; (8000e54 <display7SEG+0x31c>)
 8000d18:	f000 ff7b 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2140      	movs	r1, #64	; 0x40
 8000d20:	484c      	ldr	r0, [pc, #304]	; (8000e54 <display7SEG+0x31c>)
 8000d22:	f000 ff76 	bl	8001c12 <HAL_GPIO_WritePin>
		break;
 8000d26:	e090      	b.n	8000e4a <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4849      	ldr	r0, [pc, #292]	; (8000e54 <display7SEG+0x31c>)
 8000d2e:	f000 ff70 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2102      	movs	r1, #2
 8000d36:	4847      	ldr	r0, [pc, #284]	; (8000e54 <display7SEG+0x31c>)
 8000d38:	f000 ff6b 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4844      	ldr	r0, [pc, #272]	; (8000e54 <display7SEG+0x31c>)
 8000d42:	f000 ff66 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2108      	movs	r1, #8
 8000d4a:	4842      	ldr	r0, [pc, #264]	; (8000e54 <display7SEG+0x31c>)
 8000d4c:	f000 ff61 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2110      	movs	r1, #16
 8000d54:	483f      	ldr	r0, [pc, #252]	; (8000e54 <display7SEG+0x31c>)
 8000d56:	f000 ff5c 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	483d      	ldr	r0, [pc, #244]	; (8000e54 <display7SEG+0x31c>)
 8000d60:	f000 ff57 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	483a      	ldr	r0, [pc, #232]	; (8000e54 <display7SEG+0x31c>)
 8000d6a:	f000 ff52 	bl	8001c12 <HAL_GPIO_WritePin>
		break;
 8000d6e:	e06c      	b.n	8000e4a <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2101      	movs	r1, #1
 8000d74:	4837      	ldr	r0, [pc, #220]	; (8000e54 <display7SEG+0x31c>)
 8000d76:	f000 ff4c 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	4835      	ldr	r0, [pc, #212]	; (8000e54 <display7SEG+0x31c>)
 8000d80:	f000 ff47 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2104      	movs	r1, #4
 8000d88:	4832      	ldr	r0, [pc, #200]	; (8000e54 <display7SEG+0x31c>)
 8000d8a:	f000 ff42 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2108      	movs	r1, #8
 8000d92:	4830      	ldr	r0, [pc, #192]	; (8000e54 <display7SEG+0x31c>)
 8000d94:	f000 ff3d 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	482d      	ldr	r0, [pc, #180]	; (8000e54 <display7SEG+0x31c>)
 8000d9e:	f000 ff38 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2120      	movs	r1, #32
 8000da6:	482b      	ldr	r0, [pc, #172]	; (8000e54 <display7SEG+0x31c>)
 8000da8:	f000 ff33 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2140      	movs	r1, #64	; 0x40
 8000db0:	4828      	ldr	r0, [pc, #160]	; (8000e54 <display7SEG+0x31c>)
 8000db2:	f000 ff2e 	bl	8001c12 <HAL_GPIO_WritePin>
		break;
 8000db6:	e048      	b.n	8000e4a <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4825      	ldr	r0, [pc, #148]	; (8000e54 <display7SEG+0x31c>)
 8000dbe:	f000 ff28 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	4823      	ldr	r0, [pc, #140]	; (8000e54 <display7SEG+0x31c>)
 8000dc8:	f000 ff23 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2104      	movs	r1, #4
 8000dd0:	4820      	ldr	r0, [pc, #128]	; (8000e54 <display7SEG+0x31c>)
 8000dd2:	f000 ff1e 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2108      	movs	r1, #8
 8000dda:	481e      	ldr	r0, [pc, #120]	; (8000e54 <display7SEG+0x31c>)
 8000ddc:	f000 ff19 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2110      	movs	r1, #16
 8000de4:	481b      	ldr	r0, [pc, #108]	; (8000e54 <display7SEG+0x31c>)
 8000de6:	f000 ff14 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2120      	movs	r1, #32
 8000dee:	4819      	ldr	r0, [pc, #100]	; (8000e54 <display7SEG+0x31c>)
 8000df0:	f000 ff0f 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2140      	movs	r1, #64	; 0x40
 8000df8:	4816      	ldr	r0, [pc, #88]	; (8000e54 <display7SEG+0x31c>)
 8000dfa:	f000 ff0a 	bl	8001c12 <HAL_GPIO_WritePin>
		break;
 8000dfe:	e024      	b.n	8000e4a <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2101      	movs	r1, #1
 8000e04:	4813      	ldr	r0, [pc, #76]	; (8000e54 <display7SEG+0x31c>)
 8000e06:	f000 ff04 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4811      	ldr	r0, [pc, #68]	; (8000e54 <display7SEG+0x31c>)
 8000e10:	f000 feff 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2104      	movs	r1, #4
 8000e18:	480e      	ldr	r0, [pc, #56]	; (8000e54 <display7SEG+0x31c>)
 8000e1a:	f000 fefa 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2108      	movs	r1, #8
 8000e22:	480c      	ldr	r0, [pc, #48]	; (8000e54 <display7SEG+0x31c>)
 8000e24:	f000 fef5 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <display7SEG+0x31c>)
 8000e2e:	f000 fef0 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2120      	movs	r1, #32
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <display7SEG+0x31c>)
 8000e38:	f000 feeb 	bl	8001c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2140      	movs	r1, #64	; 0x40
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <display7SEG+0x31c>)
 8000e42:	f000 fee6 	bl	8001c12 <HAL_GPIO_WritePin>
		break;
 8000e46:	e000      	b.n	8000e4a <display7SEG+0x312>
	default:
		break;
 8000e48:	bf00      	nop
	}
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40010c00 	.word	0x40010c00

08000e58 <update7SEG>:


const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {1,2,3,4};
void update7SEG(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	if(get_timer_sweep_led_7_seg_flag()){
 8000e5c:	f000 fa9a 	bl	8001394 <get_timer_sweep_led_7_seg_flag>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8090 	beq.w	8000f88 <update7SEG+0x130>
		set_timer_sweep_led_7_seg(100/TIMER_DURATION);
 8000e68:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <update7SEG+0x134>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2264      	movs	r2, #100	; 0x64
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fa7a 	bl	800136c <set_timer_sweep_led_7_seg>
		//TODO
		display7SEG(led_buffer[index_led]);
 8000e78:	4b45      	ldr	r3, [pc, #276]	; (8000f90 <update7SEG+0x138>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a45      	ldr	r2, [pc, #276]	; (8000f94 <update7SEG+0x13c>)
 8000e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fe58 	bl	8000b38 <display7SEG>
		switch(index_led){
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <update7SEG+0x138>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d86f      	bhi.n	8000f70 <update7SEG+0x118>
 8000e90:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <update7SEG+0x40>)
 8000e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e96:	bf00      	nop
 8000e98:	08000ea9 	.word	0x08000ea9
 8000e9c:	08000edb 	.word	0x08000edb
 8000ea0:	08000f0d 	.word	0x08000f0d
 8000ea4:	08000f3f 	.word	0x08000f3f
		case 0:
			// Display the first 7 SEG with led_buffer [0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eae:	483a      	ldr	r0, [pc, #232]	; (8000f98 <update7SEG+0x140>)
 8000eb0:	f000 feaf 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eba:	4837      	ldr	r0, [pc, #220]	; (8000f98 <update7SEG+0x140>)
 8000ebc:	f000 fea9 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec6:	4834      	ldr	r0, [pc, #208]	; (8000f98 <update7SEG+0x140>)
 8000ec8:	f000 fea3 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed2:	4831      	ldr	r0, [pc, #196]	; (8000f98 <update7SEG+0x140>)
 8000ed4:	f000 fe9d 	bl	8001c12 <HAL_GPIO_WritePin>
			break;
 8000ed8:	e04b      	b.n	8000f72 <update7SEG+0x11a>
		case 1:
			// Display the first 7 SEG with led_buffer [1]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee0:	482d      	ldr	r0, [pc, #180]	; (8000f98 <update7SEG+0x140>)
 8000ee2:	f000 fe96 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eec:	482a      	ldr	r0, [pc, #168]	; (8000f98 <update7SEG+0x140>)
 8000eee:	f000 fe90 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef8:	4827      	ldr	r0, [pc, #156]	; (8000f98 <update7SEG+0x140>)
 8000efa:	f000 fe8a 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f04:	4824      	ldr	r0, [pc, #144]	; (8000f98 <update7SEG+0x140>)
 8000f06:	f000 fe84 	bl	8001c12 <HAL_GPIO_WritePin>
			break;
 8000f0a:	e032      	b.n	8000f72 <update7SEG+0x11a>
		case 2:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f12:	4821      	ldr	r0, [pc, #132]	; (8000f98 <update7SEG+0x140>)
 8000f14:	f000 fe7d 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1e:	481e      	ldr	r0, [pc, #120]	; (8000f98 <update7SEG+0x140>)
 8000f20:	f000 fe77 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2a:	481b      	ldr	r0, [pc, #108]	; (8000f98 <update7SEG+0x140>)
 8000f2c:	f000 fe71 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f36:	4818      	ldr	r0, [pc, #96]	; (8000f98 <update7SEG+0x140>)
 8000f38:	f000 fe6b 	bl	8001c12 <HAL_GPIO_WritePin>
			break;
 8000f3c:	e019      	b.n	8000f72 <update7SEG+0x11a>
		case 3:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	4814      	ldr	r0, [pc, #80]	; (8000f98 <update7SEG+0x140>)
 8000f46:	f000 fe64 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f50:	4811      	ldr	r0, [pc, #68]	; (8000f98 <update7SEG+0x140>)
 8000f52:	f000 fe5e 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5c:	480e      	ldr	r0, [pc, #56]	; (8000f98 <update7SEG+0x140>)
 8000f5e:	f000 fe58 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <update7SEG+0x140>)
 8000f6a:	f000 fe52 	bl	8001c12 <HAL_GPIO_WritePin>
			break;
 8000f6e:	e000      	b.n	8000f72 <update7SEG+0x11a>
		default: break;
 8000f70:	bf00      	nop
		}
		index_led = (index_led + 1) % MAX_LED;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <update7SEG+0x138>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	2204      	movs	r2, #4
 8000f7a:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f7e:	fb02 f201 	mul.w	r2, r2, r1
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	4a02      	ldr	r2, [pc, #8]	; (8000f90 <update7SEG+0x138>)
 8000f86:	6013      	str	r3, [r2, #0]
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000060 	.word	0x20000060
 8000f90:	20000054 	.word	0x20000054
 8000f94:	20000004 	.word	0x20000004
 8000f98:	40010c00 	.word	0x40010c00

08000f9c <updateTraffic7SEGBuffer>:

void updateTraffic7SEGBuffer(){
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
	led_buffer[0] = traffic_led_7SEG_1 / 10;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <updateTraffic7SEGBuffer+0x70>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <updateTraffic7SEGBuffer+0x74>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <updateTraffic7SEGBuffer+0x78>)
 8000fb2:	601a      	str	r2, [r3, #0]
	led_buffer[1] = traffic_led_7SEG_1 % 10;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <updateTraffic7SEGBuffer+0x70>)
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <updateTraffic7SEGBuffer+0x74>)
 8000fba:	fba3 1302 	umull	r1, r3, r3, r2
 8000fbe:	08d9      	lsrs	r1, r3, #3
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <updateTraffic7SEGBuffer+0x78>)
 8000fd0:	605a      	str	r2, [r3, #4]
	led_buffer[2] = traffic_led_7SEG_2 / 10;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <updateTraffic7SEGBuffer+0x7c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <updateTraffic7SEGBuffer+0x74>)
 8000fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <updateTraffic7SEGBuffer+0x78>)
 8000fe4:	609a      	str	r2, [r3, #8]
	led_buffer[3] = traffic_led_7SEG_2 % 10;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <updateTraffic7SEGBuffer+0x7c>)
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <updateTraffic7SEGBuffer+0x74>)
 8000fec:	fba3 1302 	umull	r1, r3, r3, r2
 8000ff0:	08d9      	lsrs	r1, r3, #3
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <updateTraffic7SEGBuffer+0x78>)
 8001002:	60da      	str	r2, [r3, #12]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	20000068 	.word	0x20000068
 8001010:	cccccccd 	.word	0xcccccccd
 8001014:	20000004 	.word	0x20000004
 8001018:	20000064 	.word	0x20000064

0800101c <single_led_for_RG>:



void single_led_for_RG(){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	//TRAFFIC LIGHT 1
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	2102      	movs	r1, #2
 8001024:	480e      	ldr	r0, [pc, #56]	; (8001060 <single_led_for_RG+0x44>)
 8001026:	f000 fdf4 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2104      	movs	r1, #4
 800102e:	480c      	ldr	r0, [pc, #48]	; (8001060 <single_led_for_RG+0x44>)
 8001030:	f000 fdef 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_1_GPIO_Port, AMBER_1_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2108      	movs	r1, #8
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <single_led_for_RG+0x44>)
 800103a:	f000 fdea 	bl	8001c12 <HAL_GPIO_WritePin>

	//TRAFFIC LIGHT 2
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2110      	movs	r1, #16
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <single_led_for_RG+0x44>)
 8001044:	f000 fde5 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2120      	movs	r1, #32
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <single_led_for_RG+0x44>)
 800104e:	f000 fde0 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_2_GPIO_Port, AMBER_2_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2140      	movs	r1, #64	; 0x40
 8001056:	4802      	ldr	r0, [pc, #8]	; (8001060 <single_led_for_RG+0x44>)
 8001058:	f000 fddb 	bl	8001c12 <HAL_GPIO_WritePin>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40010800 	.word	0x40010800

08001064 <single_led_for_RA>:

void single_led_for_RA(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	//TRAFFIC LIGHT 1
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2102      	movs	r1, #2
 800106c:	480e      	ldr	r0, [pc, #56]	; (80010a8 <single_led_for_RA+0x44>)
 800106e:	f000 fdd0 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2104      	movs	r1, #4
 8001076:	480c      	ldr	r0, [pc, #48]	; (80010a8 <single_led_for_RA+0x44>)
 8001078:	f000 fdcb 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_1_GPIO_Port, AMBER_1_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2108      	movs	r1, #8
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <single_led_for_RA+0x44>)
 8001082:	f000 fdc6 	bl	8001c12 <HAL_GPIO_WritePin>

	//TRAFFIC LIGHT 2
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2110      	movs	r1, #16
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <single_led_for_RA+0x44>)
 800108c:	f000 fdc1 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2120      	movs	r1, #32
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <single_led_for_RA+0x44>)
 8001096:	f000 fdbc 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_2_GPIO_Port, AMBER_2_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2140      	movs	r1, #64	; 0x40
 800109e:	4802      	ldr	r0, [pc, #8]	; (80010a8 <single_led_for_RA+0x44>)
 80010a0:	f000 fdb7 	bl	8001c12 <HAL_GPIO_WritePin>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40010800 	.word	0x40010800

080010ac <single_led_for_GR>:

void single_led_for_GR(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	//TRAFFIC LIGHT 1
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2102      	movs	r1, #2
 80010b4:	480e      	ldr	r0, [pc, #56]	; (80010f0 <single_led_for_GR+0x44>)
 80010b6:	f000 fdac 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2104      	movs	r1, #4
 80010be:	480c      	ldr	r0, [pc, #48]	; (80010f0 <single_led_for_GR+0x44>)
 80010c0:	f000 fda7 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_1_GPIO_Port, AMBER_1_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2108      	movs	r1, #8
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <single_led_for_GR+0x44>)
 80010ca:	f000 fda2 	bl	8001c12 <HAL_GPIO_WritePin>

	//TRAFFIC LIGHT 2
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2110      	movs	r1, #16
 80010d2:	4807      	ldr	r0, [pc, #28]	; (80010f0 <single_led_for_GR+0x44>)
 80010d4:	f000 fd9d 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2120      	movs	r1, #32
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <single_led_for_GR+0x44>)
 80010de:	f000 fd98 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_2_GPIO_Port, AMBER_2_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2140      	movs	r1, #64	; 0x40
 80010e6:	4802      	ldr	r0, [pc, #8]	; (80010f0 <single_led_for_GR+0x44>)
 80010e8:	f000 fd93 	bl	8001c12 <HAL_GPIO_WritePin>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40010800 	.word	0x40010800

080010f4 <single_led_for_AR>:

void single_led_for_AR(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	//TRAFFIC LIGHT 1
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2102      	movs	r1, #2
 80010fc:	480e      	ldr	r0, [pc, #56]	; (8001138 <single_led_for_AR+0x44>)
 80010fe:	f000 fd88 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2104      	movs	r1, #4
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <single_led_for_AR+0x44>)
 8001108:	f000 fd83 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_1_GPIO_Port, AMBER_1_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	2108      	movs	r1, #8
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <single_led_for_AR+0x44>)
 8001112:	f000 fd7e 	bl	8001c12 <HAL_GPIO_WritePin>

	//TRAFFIC LIGHT 2
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2110      	movs	r1, #16
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <single_led_for_AR+0x44>)
 800111c:	f000 fd79 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2120      	movs	r1, #32
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <single_led_for_AR+0x44>)
 8001126:	f000 fd74 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_2_GPIO_Port, AMBER_2_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2140      	movs	r1, #64	; 0x40
 800112e:	4802      	ldr	r0, [pc, #8]	; (8001138 <single_led_for_AR+0x44>)
 8001130:	f000 fd6f 	bl	8001c12 <HAL_GPIO_WritePin>
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40010800 	.word	0x40010800

0800113c <turn_on_all_single_led>:



void turn_on_all_single_led(){
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	//TRAFFIC LIGHT 1
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2102      	movs	r1, #2
 8001144:	480e      	ldr	r0, [pc, #56]	; (8001180 <turn_on_all_single_led+0x44>)
 8001146:	f000 fd64 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2104      	movs	r1, #4
 800114e:	480c      	ldr	r0, [pc, #48]	; (8001180 <turn_on_all_single_led+0x44>)
 8001150:	f000 fd5f 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_1_GPIO_Port, AMBER_1_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2108      	movs	r1, #8
 8001158:	4809      	ldr	r0, [pc, #36]	; (8001180 <turn_on_all_single_led+0x44>)
 800115a:	f000 fd5a 	bl	8001c12 <HAL_GPIO_WritePin>

	//TRAFFIC LIGHT 2
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2110      	movs	r1, #16
 8001162:	4807      	ldr	r0, [pc, #28]	; (8001180 <turn_on_all_single_led+0x44>)
 8001164:	f000 fd55 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2120      	movs	r1, #32
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <turn_on_all_single_led+0x44>)
 800116e:	f000 fd50 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_2_GPIO_Port, AMBER_2_Pin, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2140      	movs	r1, #64	; 0x40
 8001176:	4802      	ldr	r0, [pc, #8]	; (8001180 <turn_on_all_single_led+0x44>)
 8001178:	f000 fd4b 	bl	8001c12 <HAL_GPIO_WritePin>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40010800 	.word	0x40010800

08001184 <turn_off_all_single_led>:

void turn_off_all_single_led(){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	//TRAFFIC LIGHT 1
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2102      	movs	r1, #2
 800118c:	480e      	ldr	r0, [pc, #56]	; (80011c8 <turn_off_all_single_led+0x44>)
 800118e:	f000 fd40 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2104      	movs	r1, #4
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <turn_off_all_single_led+0x44>)
 8001198:	f000 fd3b 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_1_GPIO_Port, AMBER_1_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2108      	movs	r1, #8
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <turn_off_all_single_led+0x44>)
 80011a2:	f000 fd36 	bl	8001c12 <HAL_GPIO_WritePin>

	//TRAFFIC LIGHT 2
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2110      	movs	r1, #16
 80011aa:	4807      	ldr	r0, [pc, #28]	; (80011c8 <turn_off_all_single_led+0x44>)
 80011ac:	f000 fd31 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2120      	movs	r1, #32
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <turn_off_all_single_led+0x44>)
 80011b6:	f000 fd2c 	bl	8001c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER_2_GPIO_Port, AMBER_2_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2140      	movs	r1, #64	; 0x40
 80011be:	4802      	ldr	r0, [pc, #8]	; (80011c8 <turn_off_all_single_led+0x44>)
 80011c0:	f000 fd27 	bl	8001c12 <HAL_GPIO_WritePin>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40010800 	.word	0x40010800

080011cc <single_led_blink_2Hz>:

uint8_t state_single_led_blink = 0;
void single_led_blink_2Hz(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
	switch(state_single_led_blink){
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <single_led_blink_2Hz+0x80>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <single_led_blink_2Hz+0x14>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d01d      	beq.n	800121a <single_led_blink_2Hz+0x4e>
		}
		//TODO
		//turn on all single LED
		turn_on_all_single_led();
		break;
	default: break;
 80011de:	e030      	b.n	8001242 <single_led_blink_2Hz+0x76>
		if(get_timer_blink_single_led_2Hz_flag()){
 80011e0:	f000 f8a6 	bl	8001330 <get_timer_blink_single_led_2Hz_flag>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <single_led_blink_2Hz+0x48>
			state_single_led_blink = 1;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <single_led_blink_2Hz+0x80>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
			int T_OFF = (500 / 2) / TIMER_DURATION;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <single_led_blink_2Hz+0x84>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	22fa      	movs	r2, #250	; 0xfa
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	60bb      	str	r3, [r7, #8]
			int T_ON = (500 / TIMER_DURATION) - T_OFF;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <single_led_blink_2Hz+0x84>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001204:	fbb2 f2f3 	udiv	r2, r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	607b      	str	r3, [r7, #4]
			set_timer_blink_single_led_2Hz(T_ON);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f87a 	bl	8001308 <set_timer_blink_single_led_2Hz>
		turn_off_all_single_led();
 8001214:	f7ff ffb6 	bl	8001184 <turn_off_all_single_led>
		break;
 8001218:	e013      	b.n	8001242 <single_led_blink_2Hz+0x76>
		if(get_timer_blink_single_led_2Hz_flag()){
 800121a:	f000 f889 	bl	8001330 <get_timer_blink_single_led_2Hz_flag>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00b      	beq.n	800123c <single_led_blink_2Hz+0x70>
			state_single_led_blink = 0;
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <single_led_blink_2Hz+0x80>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
			int T_OFF = (500 / 2) / TIMER_DURATION;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <single_led_blink_2Hz+0x84>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	22fa      	movs	r2, #250	; 0xfa
 8001230:	fbb2 f3f3 	udiv	r3, r2, r3
 8001234:	60fb      	str	r3, [r7, #12]
			set_timer_blink_single_led_2Hz(T_OFF);
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f000 f866 	bl	8001308 <set_timer_blink_single_led_2Hz>
		turn_on_all_single_led();
 800123c:	f7ff ff7e 	bl	800113c <turn_on_all_single_led>
		break;
 8001240:	bf00      	nop
	}
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000058 	.word	0x20000058
 8001250:	20000060 	.word	0x20000060

08001254 <set_timer_1000ms>:
#include "software_timer.h"


uint8_t timer_1000ms_flag;
int timer_1000ms_count;
void set_timer_1000ms(int duration){
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	timer_1000ms_count = duration;
 800125c:	4a05      	ldr	r2, [pc, #20]	; (8001274 <set_timer_1000ms+0x20>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
	timer_1000ms_flag = 0;
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <set_timer_1000ms+0x24>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	200000c4 	.word	0x200000c4
 8001278:	200000cc 	.word	0x200000cc

0800127c <get_timer_1000ms_flag>:
uint8_t get_timer_1000ms_flag(){
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
	return timer_1000ms_flag;
 8001280:	4b02      	ldr	r3, [pc, #8]	; (800128c <get_timer_1000ms_flag+0x10>)
 8001282:	781b      	ldrb	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	200000cc 	.word	0x200000cc

08001290 <set_timer_button_1_500ms>:


// timer for every 0.5s if button 1 pressed than 1s
uint8_t timer_button_1_500ms_flag;
int timer_button_1_500ms_count;
void set_timer_button_1_500ms(int duration){
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	timer_button_1_500ms_flag = 0;
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <set_timer_button_1_500ms+0x20>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
	timer_button_1_500ms_count = duration;
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <set_timer_button_1_500ms+0x24>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	200000bc 	.word	0x200000bc
 80012b4:	200000d4 	.word	0x200000d4

080012b8 <get_timer_button_1_500ms_flag>:
uint8_t get_timer_button_1_500ms_flag(){
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	return timer_button_1_500ms_flag;
 80012bc:	4b02      	ldr	r3, [pc, #8]	; (80012c8 <get_timer_button_1_500ms_flag+0x10>)
 80012be:	781b      	ldrb	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	200000bc 	.word	0x200000bc

080012cc <set_timer_button_2_500ms>:

// timer for every 0.5s if button 2 pressed than 1s
uint8_t timer_button_2_500ms_flag;
int timer_button_2_500ms_count;
void set_timer_button_2_500ms(int duration){
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	timer_button_2_500ms_flag = 0;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <set_timer_button_2_500ms+0x20>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
	timer_button_2_500ms_count = duration;
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <set_timer_button_2_500ms+0x24>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200000cd 	.word	0x200000cd
 80012f0:	200000c8 	.word	0x200000c8

080012f4 <get_timer_button_2_500ms_flag>:
uint8_t get_timer_button_2_500ms_flag(){
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	return timer_button_2_500ms_flag;
 80012f8:	4b02      	ldr	r3, [pc, #8]	; (8001304 <get_timer_button_2_500ms_flag+0x10>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	200000cd 	.word	0x200000cd

08001308 <set_timer_blink_single_led_2Hz>:

//timer for blink single led in MODE2, 3 and 4
uint8_t timer_blink_single_led_2Hz_flag;
int timer_blink_single_led_2Hz_count;
void set_timer_blink_single_led_2Hz(int duration){
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	timer_blink_single_led_2Hz_flag = 0;
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <set_timer_blink_single_led_2Hz+0x20>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
	timer_blink_single_led_2Hz_count = duration;
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <set_timer_blink_single_led_2Hz+0x24>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	200000bd 	.word	0x200000bd
 800132c:	200000c0 	.word	0x200000c0

08001330 <get_timer_blink_single_led_2Hz_flag>:
uint8_t get_timer_blink_single_led_2Hz_flag(){
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	return timer_blink_single_led_2Hz_flag;
 8001334:	4b02      	ldr	r3, [pc, #8]	; (8001340 <get_timer_blink_single_led_2Hz_flag+0x10>)
 8001336:	781b      	ldrb	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	200000bd 	.word	0x200000bd

08001344 <set_timer_blink_single_led_1Hz>:

//timer for blink one single led 1Hz
uint8_t timer_blink_single_led_1Hz_flag;
int timer_blink_single_led_1Hz_count;
void set_timer_blink_single_led_1Hz(int duration){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	timer_blink_single_led_1Hz_flag = 0;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <set_timer_blink_single_led_1Hz+0x20>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
	timer_blink_single_led_1Hz_count = duration;
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <set_timer_blink_single_led_1Hz+0x24>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200000be 	.word	0x200000be
 8001368:	200000d0 	.word	0x200000d0

0800136c <set_timer_sweep_led_7_seg>:
}

//timer for sweep led 7 segment
uint8_t timer_sweep_led_7_seg_flag;
int timer_sweep_led_7_seg_count;
void set_timer_sweep_led_7_seg(int duration){
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	timer_sweep_led_7_seg_flag = 0;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <set_timer_sweep_led_7_seg+0x20>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
	timer_sweep_led_7_seg_count = duration;
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <set_timer_sweep_led_7_seg+0x24>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200000b4 	.word	0x200000b4
 8001390:	200000b8 	.word	0x200000b8

08001394 <get_timer_sweep_led_7_seg_flag>:
uint8_t get_timer_sweep_led_7_seg_flag(){
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	return timer_sweep_led_7_seg_flag;
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <get_timer_sweep_led_7_seg_flag+0x10>)
 800139a:	781b      	ldrb	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	200000b4 	.word	0x200000b4

080013a8 <timer_run>:


void timer_run(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	timer_1000ms_count --;
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <timer_run+0xac>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	4a28      	ldr	r2, [pc, #160]	; (8001454 <timer_run+0xac>)
 80013b4:	6013      	str	r3, [r2, #0]
	if(timer_1000ms_count <= 0){
 80013b6:	4b27      	ldr	r3, [pc, #156]	; (8001454 <timer_run+0xac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	dc02      	bgt.n	80013c4 <timer_run+0x1c>
		timer_1000ms_flag = 1;
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <timer_run+0xb0>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
	}

	timer_blink_single_led_2Hz_count --;
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <timer_run+0xb4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	4a24      	ldr	r2, [pc, #144]	; (800145c <timer_run+0xb4>)
 80013cc:	6013      	str	r3, [r2, #0]
	if(timer_blink_single_led_2Hz_count <= 0){
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <timer_run+0xb4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dc02      	bgt.n	80013dc <timer_run+0x34>
		timer_blink_single_led_2Hz_flag = 1;
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <timer_run+0xb8>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
	}

	timer_button_1_500ms_count --;
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <timer_run+0xbc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	4a20      	ldr	r2, [pc, #128]	; (8001464 <timer_run+0xbc>)
 80013e4:	6013      	str	r3, [r2, #0]
	if(timer_button_1_500ms_count <= 0){
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <timer_run+0xbc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dc02      	bgt.n	80013f4 <timer_run+0x4c>
		timer_button_1_500ms_flag = 1;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <timer_run+0xc0>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
	}

	timer_button_2_500ms_count --;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <timer_run+0xc4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	4a1c      	ldr	r2, [pc, #112]	; (800146c <timer_run+0xc4>)
 80013fc:	6013      	str	r3, [r2, #0]
	if(timer_button_2_500ms_count <= 0){
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <timer_run+0xc4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	dc02      	bgt.n	800140c <timer_run+0x64>
		timer_button_2_500ms_flag = 1;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <timer_run+0xc8>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
	}

	timer_sweep_led_7_seg_count --;
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <timer_run+0xcc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3b01      	subs	r3, #1
 8001412:	4a18      	ldr	r2, [pc, #96]	; (8001474 <timer_run+0xcc>)
 8001414:	6013      	str	r3, [r2, #0]
	if(timer_sweep_led_7_seg_count <= 0){
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <timer_run+0xcc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	dc02      	bgt.n	8001424 <timer_run+0x7c>
		timer_sweep_led_7_seg_flag = 1;
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <timer_run+0xd0>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
	}

	timer_blink_single_led_1Hz_count --;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <timer_run+0xd4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3b01      	subs	r3, #1
 800142a:	4a14      	ldr	r2, [pc, #80]	; (800147c <timer_run+0xd4>)
 800142c:	6013      	str	r3, [r2, #0]
	if(timer_blink_single_led_1Hz_count <= 0){
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <timer_run+0xd4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dc0c      	bgt.n	8001450 <timer_run+0xa8>
		HAL_GPIO_TogglePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin);
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	4811      	ldr	r0, [pc, #68]	; (8001480 <timer_run+0xd8>)
 800143a:	f000 fc02 	bl	8001c42 <HAL_GPIO_TogglePin>
		set_timer_blink_single_led_1Hz(1000 / TIMER_DURATION);
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <timer_run+0xdc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff7a 	bl	8001344 <set_timer_blink_single_led_1Hz>
	}
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200000c4 	.word	0x200000c4
 8001458:	200000cc 	.word	0x200000cc
 800145c:	200000c0 	.word	0x200000c0
 8001460:	200000bd 	.word	0x200000bd
 8001464:	200000d4 	.word	0x200000d4
 8001468:	200000bc 	.word	0x200000bc
 800146c:	200000c8 	.word	0x200000c8
 8001470:	200000cd 	.word	0x200000cd
 8001474:	200000b8 	.word	0x200000b8
 8001478:	200000b4 	.word	0x200000b4
 800147c:	200000d0 	.word	0x200000d0
 8001480:	40010800 	.word	0x40010800
 8001484:	20000060 	.word	0x20000060

08001488 <init_timer>:

void init_timer(){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	set_timer_1000ms(4);
 800148c:	2004      	movs	r0, #4
 800148e:	f7ff fee1 	bl	8001254 <set_timer_1000ms>

	set_timer_blink_single_led_2Hz(3);
 8001492:	2003      	movs	r0, #3
 8001494:	f7ff ff38 	bl	8001308 <set_timer_blink_single_led_2Hz>

	set_timer_sweep_led_7_seg(5);
 8001498:	2005      	movs	r0, #5
 800149a:	f7ff ff67 	bl	800136c <set_timer_sweep_led_7_seg>

	set_timer_blink_single_led_1Hz(2);
 800149e:	2002      	movs	r0, #2
 80014a0:	f7ff ff50 	bl	8001344 <set_timer_blink_single_led_1Hz>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_MspInit+0x5c>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a14      	ldr	r2, [pc, #80]	; (8001504 <HAL_MspInit+0x5c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_MspInit+0x5c>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_MspInit+0x5c>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_MspInit+0x5c>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_MspInit+0x5c>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_MspInit+0x60>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_MspInit+0x60>)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000

0800150c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800151c:	d113      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_TIM_Base_MspInit+0x44>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_TIM_Base_MspInit+0x44>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_TIM_Base_MspInit+0x44>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	201c      	movs	r0, #28
 800153c:	f000 f9a1 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001540:	201c      	movs	r0, #28
 8001542:	f000 f9ba 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <NMI_Handler+0x4>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159a:	f000 f87f 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM2_IRQHandler+0x10>)
 80015aa:	f000 ffdb 	bl	8002564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000006c 	.word	0x2000006c

080015b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c4:	f7ff fff8 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015ca:	490c      	ldr	r1, [pc, #48]	; (80015fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015e0:	4c09      	ldr	r4, [pc, #36]	; (8001608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ee:	f001 fb05 	bl	8002bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f2:	f7ff f96d 	bl	80008d0 <main>
  bx lr
 80015f6:	4770      	bx	lr
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001600:	08002c98 	.word	0x08002c98
  ldr r2, =_sbss
 8001604:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001608:	200000dc 	.word	0x200000dc

0800160c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC1_2_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_Init+0x28>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_Init+0x28>)
 800161a:	f043 0310 	orr.w	r3, r3, #16
 800161e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f923 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	200f      	movs	r0, #15
 8001628:	f000 f808 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff ff3c 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40022000 	.word	0x40022000

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x54>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x58>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f93b 	bl	80018d6 <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f000 f903 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_InitTick+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000014 	.word	0x20000014
 8001694:	2000001c 	.word	0x2000001c
 8001698:	20000018 	.word	0x20000018

0800169c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x1c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_IncTick+0x20>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_IncTick+0x20>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	2000001c 	.word	0x2000001c
 80016bc:	200000d8 	.word	0x200000d8

080016c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <HAL_GetTick+0x10>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	200000d8 	.word	0x200000d8

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4906      	ldr	r1, [pc, #24]	; (800176c <__NVIC_EnableIRQ+0x34>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff90 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff2d 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff42 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff90 	bl	80017c4 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5f 	bl	8001770 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff35 	bl	8001738 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa2 	bl	8001828 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b08b      	sub	sp, #44	; 0x2c
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001902:	e148      	b.n	8001b96 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001904:	2201      	movs	r2, #1
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8137 	bne.w	8001b90 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4aa3      	ldr	r2, [pc, #652]	; (8001bb4 <HAL_GPIO_Init+0x2c4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d05e      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800192c:	4aa1      	ldr	r2, [pc, #644]	; (8001bb4 <HAL_GPIO_Init+0x2c4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d875      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001932:	4aa1      	ldr	r2, [pc, #644]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d058      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001938:	4a9f      	ldr	r2, [pc, #636]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d86f      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800193e:	4a9f      	ldr	r2, [pc, #636]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d052      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001944:	4a9d      	ldr	r2, [pc, #628]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d869      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800194a:	4a9d      	ldr	r2, [pc, #628]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d04c      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001950:	4a9b      	ldr	r2, [pc, #620]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d863      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001956:	4a9b      	ldr	r2, [pc, #620]	; (8001bc4 <HAL_GPIO_Init+0x2d4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d046      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800195c:	4a99      	ldr	r2, [pc, #612]	; (8001bc4 <HAL_GPIO_Init+0x2d4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d85d      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001962:	2b12      	cmp	r3, #18
 8001964:	d82a      	bhi.n	80019bc <HAL_GPIO_Init+0xcc>
 8001966:	2b12      	cmp	r3, #18
 8001968:	d859      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800196a:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <HAL_GPIO_Init+0x80>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019c5 	.word	0x080019c5
 8001978:	080019d7 	.word	0x080019d7
 800197c:	08001a19 	.word	0x08001a19
 8001980:	08001a1f 	.word	0x08001a1f
 8001984:	08001a1f 	.word	0x08001a1f
 8001988:	08001a1f 	.word	0x08001a1f
 800198c:	08001a1f 	.word	0x08001a1f
 8001990:	08001a1f 	.word	0x08001a1f
 8001994:	08001a1f 	.word	0x08001a1f
 8001998:	08001a1f 	.word	0x08001a1f
 800199c:	08001a1f 	.word	0x08001a1f
 80019a0:	08001a1f 	.word	0x08001a1f
 80019a4:	08001a1f 	.word	0x08001a1f
 80019a8:	08001a1f 	.word	0x08001a1f
 80019ac:	08001a1f 	.word	0x08001a1f
 80019b0:	08001a1f 	.word	0x08001a1f
 80019b4:	080019cd 	.word	0x080019cd
 80019b8:	080019e1 	.word	0x080019e1
 80019bc:	4a82      	ldr	r2, [pc, #520]	; (8001bc8 <HAL_GPIO_Init+0x2d8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019c2:	e02c      	b.n	8001a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e029      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	3304      	adds	r3, #4
 80019d2:	623b      	str	r3, [r7, #32]
          break;
 80019d4:	e024      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	3308      	adds	r3, #8
 80019dc:	623b      	str	r3, [r7, #32]
          break;
 80019de:	e01f      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	330c      	adds	r3, #12
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e01a      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019f2:	2304      	movs	r3, #4
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e013      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a00:	2308      	movs	r3, #8
 8001a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	611a      	str	r2, [r3, #16]
          break;
 8001a0a:	e009      	b.n	8001a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	615a      	str	r2, [r3, #20]
          break;
 8001a16:	e003      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
          break;
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          break;
 8001a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d801      	bhi.n	8001a2a <HAL_GPIO_Init+0x13a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	e001      	b.n	8001a2e <HAL_GPIO_Init+0x13e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2bff      	cmp	r3, #255	; 0xff
 8001a34:	d802      	bhi.n	8001a3c <HAL_GPIO_Init+0x14c>
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x152>
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	3b08      	subs	r3, #8
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	210f      	movs	r1, #15
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	6a39      	ldr	r1, [r7, #32]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8090 	beq.w	8001b90 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a70:	4b56      	ldr	r3, [pc, #344]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a55      	ldr	r2, [pc, #340]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a88:	4a51      	ldr	r2, [pc, #324]	; (8001bd0 <HAL_GPIO_Init+0x2e0>)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a49      	ldr	r2, [pc, #292]	; (8001bd4 <HAL_GPIO_Init+0x2e4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00d      	beq.n	8001ad0 <HAL_GPIO_Init+0x1e0>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a48      	ldr	r2, [pc, #288]	; (8001bd8 <HAL_GPIO_Init+0x2e8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d007      	beq.n	8001acc <HAL_GPIO_Init+0x1dc>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <HAL_GPIO_Init+0x2ec>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_GPIO_Init+0x1d8>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e004      	b.n	8001ad2 <HAL_GPIO_Init+0x1e2>
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x1e2>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_GPIO_Init+0x1e2>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad4:	f002 0203 	and.w	r2, r2, #3
 8001ad8:	0092      	lsls	r2, r2, #2
 8001ada:	4093      	lsls	r3, r2
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae2:	493b      	ldr	r1, [pc, #236]	; (8001bd0 <HAL_GPIO_Init+0x2e0>)
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001afc:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4937      	ldr	r1, [pc, #220]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b0a:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4933      	ldr	r1, [pc, #204]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b24:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	492d      	ldr	r1, [pc, #180]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60cb      	str	r3, [r1, #12]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b32:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4929      	ldr	r1, [pc, #164]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4923      	ldr	r1, [pc, #140]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b5a:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	491f      	ldr	r1, [pc, #124]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4919      	ldr	r1, [pc, #100]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4915      	ldr	r1, [pc, #84]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	3301      	adds	r3, #1
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f47f aeaf 	bne.w	8001904 <HAL_GPIO_Init+0x14>
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	bf00      	nop
 8001baa:	372c      	adds	r7, #44	; 0x2c
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	10320000 	.word	0x10320000
 8001bb8:	10310000 	.word	0x10310000
 8001bbc:	10220000 	.word	0x10220000
 8001bc0:	10210000 	.word	0x10210000
 8001bc4:	10120000 	.word	0x10120000
 8001bc8:	10110000 	.word	0x10110000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40010800 	.word	0x40010800
 8001bd8:	40010c00 	.word	0x40010c00
 8001bdc:	40011000 	.word	0x40011000
 8001be0:	40010400 	.word	0x40010400

08001be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	887b      	ldrh	r3, [r7, #2]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e001      	b.n	8001c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	807b      	strh	r3, [r7, #2]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c22:	787b      	ldrb	r3, [r7, #1]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c28:	887a      	ldrh	r2, [r7, #2]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c2e:	e003      	b.n	8001c38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	041a      	lsls	r2, r3, #16
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	611a      	str	r2, [r3, #16]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b085      	sub	sp, #20
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c54:	887a      	ldrh	r2, [r7, #2]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	041a      	lsls	r2, r3, #16
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	400b      	ands	r3, r1
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e26c      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8087 	beq.w	8001da2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c94:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d00c      	beq.n	8001cba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca0:	4b8f      	ldr	r3, [pc, #572]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d112      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
 8001cac:	4b8c      	ldr	r3, [pc, #560]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cba:	4b89      	ldr	r3, [pc, #548]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d06c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x12c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d168      	bne.n	8001da0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e246      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x76>
 8001cdc:	4b80      	ldr	r3, [pc, #512]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a7f      	ldr	r2, [pc, #508]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e02e      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x98>
 8001cf2:	4b7b      	ldr	r3, [pc, #492]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a7a      	ldr	r2, [pc, #488]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b78      	ldr	r3, [pc, #480]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a77      	ldr	r2, [pc, #476]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0xbc>
 8001d16:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a71      	ldr	r2, [pc, #452]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6e      	ldr	r2, [pc, #440]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001d30:	4b6b      	ldr	r3, [pc, #428]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a6a      	ldr	r2, [pc, #424]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a67      	ldr	r2, [pc, #412]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fcb6 	bl	80016c0 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fcb2 	bl	80016c0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1fa      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xe4>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fca2 	bl	80016c0 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fc9e 	bl	80016c0 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1e6      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x10c>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dae:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d11c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x18c>
 8001dc6:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d116      	bne.n	8001e00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x176>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1ba      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4939      	ldr	r1, [pc, #228]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	e03a      	b.n	8001e76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fc57 	bl	80016c0 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fc53 	bl	80016c0 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e19b      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4927      	ldr	r1, [pc, #156]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fc36 	bl	80016c0 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e58:	f7ff fc32 	bl	80016c0 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e17a      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03a      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d019      	beq.n	8001ebe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff fc16 	bl	80016c0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fc12 	bl	80016c0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e15a      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f000 fa9a 	bl	80023f0 <RCC_Delay>
 8001ebc:	e01c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7ff fbfc 	bl	80016c0 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eca:	e00f      	b.n	8001eec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fbf8 	bl	80016c0 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d908      	bls.n	8001eec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e140      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	42420000 	.word	0x42420000
 8001ee8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eec:	4b9e      	ldr	r3, [pc, #632]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e9      	bne.n	8001ecc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80a6 	beq.w	8002052 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0a:	4b97      	ldr	r3, [pc, #604]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b94      	ldr	r3, [pc, #592]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a93      	ldr	r2, [pc, #588]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b91      	ldr	r3, [pc, #580]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b8e      	ldr	r3, [pc, #568]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b8b      	ldr	r3, [pc, #556]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a8a      	ldr	r2, [pc, #552]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fbb9 	bl	80016c0 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7ff fbb5 	bl	80016c0 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	; 0x64
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0fd      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b81      	ldr	r3, [pc, #516]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x312>
 8001f78:	4b7b      	ldr	r3, [pc, #492]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a7a      	ldr	r2, [pc, #488]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	e02d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x334>
 8001f8e:	4b76      	ldr	r3, [pc, #472]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a75      	ldr	r2, [pc, #468]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	4b73      	ldr	r3, [pc, #460]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a72      	ldr	r2, [pc, #456]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	e01c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d10c      	bne.n	8001fca <HAL_RCC_OscConfig+0x356>
 8001fb0:	4b6d      	ldr	r3, [pc, #436]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a6c      	ldr	r2, [pc, #432]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a69      	ldr	r2, [pc, #420]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	e00b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a66      	ldr	r2, [pc, #408]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b64      	ldr	r3, [pc, #400]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a63      	ldr	r2, [pc, #396]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d015      	beq.n	8002016 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fb69 	bl	80016c0 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff fb65 	bl	80016c0 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0ab      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	4b57      	ldr	r3, [pc, #348]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ee      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x37e>
 8002014:	e014      	b.n	8002040 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7ff fb53 	bl	80016c0 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff fb4f 	bl	80016c0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e095      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	4b4c      	ldr	r3, [pc, #304]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ee      	bne.n	800201e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d105      	bne.n	8002052 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002046:	4b48      	ldr	r3, [pc, #288]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	4a47      	ldr	r2, [pc, #284]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002050:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8081 	beq.w	800215e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205c:	4b42      	ldr	r3, [pc, #264]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d061      	beq.n	800212c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d146      	bne.n	80020fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002070:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_OscConfig+0x4fc>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff fb23 	bl	80016c0 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff fb1f 	bl	80016c0 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e067      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	4b35      	ldr	r3, [pc, #212]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020a6:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	492d      	ldr	r1, [pc, #180]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b8:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a19      	ldr	r1, [r3, #32]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	430b      	orrs	r3, r1
 80020ca:	4927      	ldr	r1, [pc, #156]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x4fc>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff faf3 	bl	80016c0 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020de:	f7ff faef 	bl	80016c0 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e037      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f0:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x46a>
 80020fc:	e02f      	b.n	800215e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_RCC_OscConfig+0x4fc>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff fadc 	bl	80016c0 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff fad8 	bl	80016c0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e020      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x498>
 800212a:	e018      	b.n	800215e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e013      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	429a      	cmp	r2, r3
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	40007000 	.word	0x40007000
 8002170:	42420060 	.word	0x42420060

08002174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0d0      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d910      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b67      	ldr	r3, [pc, #412]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4965      	ldr	r1, [pc, #404]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b63      	ldr	r3, [pc, #396]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0b8      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d0:	4b59      	ldr	r3, [pc, #356]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a58      	ldr	r2, [pc, #352]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e8:	4b53      	ldr	r3, [pc, #332]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a52      	ldr	r2, [pc, #328]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f4:	4b50      	ldr	r3, [pc, #320]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	494d      	ldr	r1, [pc, #308]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d040      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	4b47      	ldr	r3, [pc, #284]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d115      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e07f      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b41      	ldr	r3, [pc, #260]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e073      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e06b      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b39      	ldr	r3, [pc, #228]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4936      	ldr	r1, [pc, #216]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7ff fa2c 	bl	80016c0 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7ff fa28 	bl	80016c0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e053      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d210      	bcs.n	80022c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	4922      	ldr	r1, [pc, #136]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e032      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4916      	ldr	r1, [pc, #88]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	490e      	ldr	r1, [pc, #56]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002302:	f000 f821 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002306:	4602      	mov	r2, r0
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	490a      	ldr	r1, [pc, #40]	; (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002314:	5ccb      	ldrb	r3, [r1, r3]
 8002316:	fa22 f303 	lsr.w	r3, r2, r3
 800231a:	4a09      	ldr	r2, [pc, #36]	; (8002340 <HAL_RCC_ClockConfig+0x1cc>)
 800231c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_RCC_ClockConfig+0x1d0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f98a 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40022000 	.word	0x40022000
 8002338:	40021000 	.word	0x40021000
 800233c:	08002c6c 	.word	0x08002c6c
 8002340:	20000014 	.word	0x20000014
 8002344:	20000018 	.word	0x20000018

08002348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b04      	cmp	r3, #4
 8002370:	d002      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x30>
 8002372:	2b08      	cmp	r3, #8
 8002374:	d003      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x36>
 8002376:	e027      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800237a:	613b      	str	r3, [r7, #16]
      break;
 800237c:	e027      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	0c9b      	lsrs	r3, r3, #18
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d010      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	0c5b      	lsrs	r3, r3, #17
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023aa:	fb02 f203 	mul.w	r2, r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e004      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	613b      	str	r3, [r7, #16]
      break;
 80023c6:	e002      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ca:	613b      	str	r3, [r7, #16]
      break;
 80023cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ce:	693b      	ldr	r3, [r7, #16]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	007a1200 	.word	0x007a1200
 80023e4:	08002c7c 	.word	0x08002c7c
 80023e8:	08002c8c 	.word	0x08002c8c
 80023ec:	003d0900 	.word	0x003d0900

080023f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <RCC_Delay+0x34>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <RCC_Delay+0x38>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0a5b      	lsrs	r3, r3, #9
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800240c:	bf00      	nop
  }
  while (Delay --);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	60fa      	str	r2, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f9      	bne.n	800240c <RCC_Delay+0x1c>
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	20000014 	.word	0x20000014
 8002428:	10624dd3 	.word	0x10624dd3

0800242c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e041      	b.n	80024c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff f85a 	bl	800150c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f000 fa6e 	bl	800294c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e035      	b.n	8002550 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a16      	ldr	r2, [pc, #88]	; (800255c <HAL_TIM_Base_Start_IT+0x90>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d009      	beq.n	800251a <HAL_TIM_Base_Start_IT+0x4e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250e:	d004      	beq.n	800251a <HAL_TIM_Base_Start_IT+0x4e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a12      	ldr	r2, [pc, #72]	; (8002560 <HAL_TIM_Base_Start_IT+0x94>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d111      	bne.n	800253e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b06      	cmp	r3, #6
 800252a:	d010      	beq.n	800254e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253c:	e007      	b.n	800254e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0201 	orr.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40012c00 	.word	0x40012c00
 8002560:	40000400 	.word	0x40000400

08002564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b02      	cmp	r3, #2
 8002578:	d122      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b02      	cmp	r3, #2
 8002586:	d11b      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0202 	mvn.w	r2, #2
 8002590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f9b4 	bl	8002914 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f9a7 	bl	8002902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f9b6 	bl	8002926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0204 	mvn.w	r2, #4
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2202      	movs	r2, #2
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f98a 	bl	8002914 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f97d 	bl	8002902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f98c 	bl	8002926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b08      	cmp	r3, #8
 8002620:	d122      	bne.n	8002668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b08      	cmp	r3, #8
 800262e:	d11b      	bne.n	8002668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0208 	mvn.w	r2, #8
 8002638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2204      	movs	r2, #4
 800263e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f960 	bl	8002914 <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f953 	bl	8002902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f962 	bl	8002926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b10      	cmp	r3, #16
 8002674:	d122      	bne.n	80026bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b10      	cmp	r3, #16
 8002682:	d11b      	bne.n	80026bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0210 	mvn.w	r2, #16
 800268c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2208      	movs	r2, #8
 8002692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f936 	bl	8002914 <HAL_TIM_IC_CaptureCallback>
 80026a8:	e005      	b.n	80026b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f929 	bl	8002902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f938 	bl	8002926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d10e      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d107      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0201 	mvn.w	r2, #1
 80026e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe fa16 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f2:	2b80      	cmp	r3, #128	; 0x80
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002700:	2b80      	cmp	r3, #128	; 0x80
 8002702:	d107      	bne.n	8002714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fa6b 	bl	8002bea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b40      	cmp	r3, #64	; 0x40
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d107      	bne.n	8002740 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f8fc 	bl	8002938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b20      	cmp	r3, #32
 800274c:	d10e      	bne.n	800276c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b20      	cmp	r3, #32
 800275a:	d107      	bne.n	800276c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0220 	mvn.w	r2, #32
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa36 	bl	8002bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_TIM_ConfigClockSource+0x1c>
 800278c:	2302      	movs	r3, #2
 800278e:	e0b4      	b.n	80028fa <HAL_TIM_ConfigClockSource+0x186>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c8:	d03e      	beq.n	8002848 <HAL_TIM_ConfigClockSource+0xd4>
 80027ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ce:	f200 8087 	bhi.w	80028e0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d6:	f000 8086 	beq.w	80028e6 <HAL_TIM_ConfigClockSource+0x172>
 80027da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027de:	d87f      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b70      	cmp	r3, #112	; 0x70
 80027e2:	d01a      	beq.n	800281a <HAL_TIM_ConfigClockSource+0xa6>
 80027e4:	2b70      	cmp	r3, #112	; 0x70
 80027e6:	d87b      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b60      	cmp	r3, #96	; 0x60
 80027ea:	d050      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x11a>
 80027ec:	2b60      	cmp	r3, #96	; 0x60
 80027ee:	d877      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b50      	cmp	r3, #80	; 0x50
 80027f2:	d03c      	beq.n	800286e <HAL_TIM_ConfigClockSource+0xfa>
 80027f4:	2b50      	cmp	r3, #80	; 0x50
 80027f6:	d873      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d058      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x13a>
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d86f      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002800:	2b30      	cmp	r3, #48	; 0x30
 8002802:	d064      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x15a>
 8002804:	2b30      	cmp	r3, #48	; 0x30
 8002806:	d86b      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b20      	cmp	r3, #32
 800280a:	d060      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x15a>
 800280c:	2b20      	cmp	r3, #32
 800280e:	d867      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002810:	2b00      	cmp	r3, #0
 8002812:	d05c      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x15a>
 8002814:	2b10      	cmp	r3, #16
 8002816:	d05a      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x15a>
 8002818:	e062      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6899      	ldr	r1, [r3, #8]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f000 f95e 	bl	8002aea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800283c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	609a      	str	r2, [r3, #8]
      break;
 8002846:	e04f      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f000 f947 	bl	8002aea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800286a:	609a      	str	r2, [r3, #8]
      break;
 800286c:	e03c      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	461a      	mov	r2, r3
 800287c:	f000 f8be 	bl	80029fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2150      	movs	r1, #80	; 0x50
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f915 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 800288c:	e02c      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	461a      	mov	r2, r3
 800289c:	f000 f8dc 	bl	8002a58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2160      	movs	r1, #96	; 0x60
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f905 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 80028ac:	e01c      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6859      	ldr	r1, [r3, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f000 f89e 	bl	80029fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2140      	movs	r1, #64	; 0x40
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f8f5 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 80028cc:	e00c      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4619      	mov	r1, r3
 80028d8:	4610      	mov	r0, r2
 80028da:	f000 f8ec 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 80028de:	e003      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      break;
 80028e4:	e000      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
	...

0800294c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a25      	ldr	r2, [pc, #148]	; (80029f4 <TIM_Base_SetConfig+0xa8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d007      	beq.n	8002974 <TIM_Base_SetConfig+0x28>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296a:	d003      	beq.n	8002974 <TIM_Base_SetConfig+0x28>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a22      	ldr	r2, [pc, #136]	; (80029f8 <TIM_Base_SetConfig+0xac>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d108      	bne.n	8002986 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a1a      	ldr	r2, [pc, #104]	; (80029f4 <TIM_Base_SetConfig+0xa8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <TIM_Base_SetConfig+0x52>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002994:	d003      	beq.n	800299e <TIM_Base_SetConfig+0x52>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <TIM_Base_SetConfig+0xac>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d108      	bne.n	80029b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <TIM_Base_SetConfig+0xa8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d103      	bne.n	80029e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	615a      	str	r2, [r3, #20]
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	40012c00 	.word	0x40012c00
 80029f8:	40000400 	.word	0x40000400

080029fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	f023 0201 	bic.w	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 030a 	bic.w	r3, r3, #10
 8002a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	621a      	str	r2, [r3, #32]
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f023 0210 	bic.w	r2, r3, #16
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	031b      	lsls	r3, r3, #12
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	621a      	str	r2, [r3, #32]
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f043 0307 	orr.w	r3, r3, #7
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b087      	sub	sp, #28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	021a      	lsls	r2, r3, #8
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	609a      	str	r2, [r3, #8]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e041      	b.n	8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d009      	beq.n	8002b98 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8c:	d004      	beq.n	8002b98 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d10c      	bne.n	8002bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40012c00 	.word	0x40012c00
 8002bd4:	40000400 	.word	0x40000400

08002bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <__libc_init_array>:
 8002bfc:	b570      	push	{r4, r5, r6, lr}
 8002bfe:	2600      	movs	r6, #0
 8002c00:	4d0c      	ldr	r5, [pc, #48]	; (8002c34 <__libc_init_array+0x38>)
 8002c02:	4c0d      	ldr	r4, [pc, #52]	; (8002c38 <__libc_init_array+0x3c>)
 8002c04:	1b64      	subs	r4, r4, r5
 8002c06:	10a4      	asrs	r4, r4, #2
 8002c08:	42a6      	cmp	r6, r4
 8002c0a:	d109      	bne.n	8002c20 <__libc_init_array+0x24>
 8002c0c:	f000 f822 	bl	8002c54 <_init>
 8002c10:	2600      	movs	r6, #0
 8002c12:	4d0a      	ldr	r5, [pc, #40]	; (8002c3c <__libc_init_array+0x40>)
 8002c14:	4c0a      	ldr	r4, [pc, #40]	; (8002c40 <__libc_init_array+0x44>)
 8002c16:	1b64      	subs	r4, r4, r5
 8002c18:	10a4      	asrs	r4, r4, #2
 8002c1a:	42a6      	cmp	r6, r4
 8002c1c:	d105      	bne.n	8002c2a <__libc_init_array+0x2e>
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
 8002c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c24:	4798      	blx	r3
 8002c26:	3601      	adds	r6, #1
 8002c28:	e7ee      	b.n	8002c08 <__libc_init_array+0xc>
 8002c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2e:	4798      	blx	r3
 8002c30:	3601      	adds	r6, #1
 8002c32:	e7f2      	b.n	8002c1a <__libc_init_array+0x1e>
 8002c34:	08002c90 	.word	0x08002c90
 8002c38:	08002c90 	.word	0x08002c90
 8002c3c:	08002c90 	.word	0x08002c90
 8002c40:	08002c94 	.word	0x08002c94

08002c44 <memset>:
 8002c44:	4603      	mov	r3, r0
 8002c46:	4402      	add	r2, r0
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d100      	bne.n	8002c4e <memset+0xa>
 8002c4c:	4770      	bx	lr
 8002c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c52:	e7f9      	b.n	8002c48 <memset+0x4>

08002c54 <_init>:
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	bf00      	nop
 8002c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5a:	bc08      	pop	{r3}
 8002c5c:	469e      	mov	lr, r3
 8002c5e:	4770      	bx	lr

08002c60 <_fini>:
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c62:	bf00      	nop
 8002c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c66:	bc08      	pop	{r3}
 8002c68:	469e      	mov	lr, r3
 8002c6a:	4770      	bx	lr
